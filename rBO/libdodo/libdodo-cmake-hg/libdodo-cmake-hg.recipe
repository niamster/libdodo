class LibdodoHg(CPackageRecipe):

	name = 'libdodo-cmake-hg'
	version = '497ad5b71d24'

	buildRequires = ['gcc-c++:runtime', 'autoconf:runtime', 'filesystem', 'info-rmake-chroot:user', 'info-rmake:user', 'tcp_wrappers:devellib']

	def setup(r):
		r.addArchive('http://libdodo.org/hg/libdodo/archive/%(version)s.tar.bz2')

		extraconfig = ''	

		if Use.deque:
			extraconfig +=' -DENABLE_DEQUE=ON'
		else:
			extraconfig +=' -DENABLE_DEQUE=OFF'

		if Use.ioXexec:
			extraconfig +=' -DENABLE_IO_XEXEC=ON'
		else:
			extraconfig +=' -DENABLE_IO_XEXEC=OFF'
		
		if Use.graphicsXexec:
			extraconfig +=' -DENABLE_GRAPHICS_XEXEC=ON'
		else:
			extraconfig +=' -DENABLE_GRAPHICS_XEXEC=OFF'
	
		if Use.databaseXexec:
			extraconfig +=' -DENABLE_DATABASE_XEXEC=ON'
		else:
			extraconfig +=' -DENABLE_DATABASE_XEXEC=OFF'

		if Use.sqlite3:
			r.buildRequires += ['sqlite:devel']
			extraconfig +=' -DWITH_SQLITE3=ON'

		if Use.postgresql:
			r.buildRequires += ['postgresql:devel']
			extraconfig +=' -DWITH_POSTGRESQL=ON'

		if Use.mysql:
			r.buildRequires += ['mysql:devel']
			extraconfig +=' -DWITH_MYSQL=ON'

		if Use.ssl:
			r.buildRequires += ['openssl:devel']
			extraconfig +=' -DWITH_OPENSSL=ON'

		if Use.fast-cgi:
			r.buildRequires += ['fcgi:devel']
			extraconfig +=' -DWITH_FAST_CGI=ON'

		if Use.pcre:
			r.buildRequires += ['pcre:devel']
			extraconfig +=' -DWITH_PCRE=ON'

		if Use.dl:
			extraconfig +=' -DWITH_DL=ON'

		if Use.libxml2:
			r.buildRequires += ['libxml2:devel']
			extraconfig +=' -DWITH_LIBXML2=ON'
		
		if Use.bzip2:
			r.buildRequires += ['bzip2:devel']
			extraconfig +=' -DWITH_BZIP2=ON'

		if Use.zlib:
			r.buildRequires += ['zlib:devel']
			extraconfig +=' -DWITH_ZLIB=ON'

		if Use.iconv:
			extraconfig +=' -DWITH_ICONV=ON'

		if Use.imagemagick:
			r.buildRequires += ['ImageMagick:devel']
			extraconfig +=' -DWITH_IMAGEMAGICK=ON'

		if Use.bfd:
			r.buildRequires += ['binutils:devel']
			extraconfig +=' -DWITH_BFD=ON'
		
		r.Replace('0.11.0', '%s' % r.version, 'trunk/CMakeLists.txt')

		r.CMake(extraconfig, dir='trunk')

		r.Make(dir='trunk')
		r.Make(dir='trunk/tests')
		r.Install('trunk/libdodo.so.%(version)s','%(libdir)s/')
		r.Symlink('%(libdir)s/libdodo.so.%(version)s','%(libdir)s/libdodo.so')
		r.Install('trunk/include/','%(includedir)s/libdodo/')

/***************************************************************************
 *            pcSyncProcess.cc
 *
 *  Sun Jul 22 2007
 *  Copyright  2007  Dmytro Milinevskyy
 *  milinevskyy@gmail.com
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version 2.1 as published by
 *  the Free Software Foundation;
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/**
 * vim indentation settings
 * set tabstop=4
 * set shiftwidth=4
 */

#include <libdodo/directives.h>

#ifdef XSI_IPC
#include <sys/ipc.h>
#include <sys/sem.h>
#else /*POSIX_LOCKS*/
#include <fcntl.h>
#include <semaphore.h>
#endif
#include <sys/stat.h>
#include <time.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>

#include <libdodo/pcSyncProcess.h>
#include <libdodo/pcSyncProtector.h>
#include <libdodo/pcSyncProcessEx.h>
#include <libdodo/types.h>
#include <libdodo/toolsMisc.h>
#include <libdodo/toolsCode.h>

namespace dodo {
    namespace pc {
        namespace sync {
            /**
             * @struct process::__lock__
             * @brief defines system lock
             */
            struct process::__lock__ {
                /**
                 * constructor
                 */
                __lock__() :
#ifdef XSI_IPC
                    keeper(-1)
#else
                    keeper(NULL)
#endif
                {
                }

#ifdef XSI_IPC
                int        keeper;              ///< lock
                int        key;                 ///< key for the lock
                union semun {
                    int             val;
                    struct semid_ds *buf;
                    ushort          *array;
                } control;                      ///< lock lock->control structure

                sembuf     operations[1];       ///< lock lock->operations
#else
                sem_t      *keeper;             ///< lock
                dodo::string key;                 ///< key for the lock
#endif
            };
        };
    };
};

using namespace dodo::pc::sync;

process::process(process &)
{
}

//-------------------------------------------------------------------

process::process(int a_key) : lock(new process::__lock__),
                              autogenerated(false),
                              recursive(0)

{
#ifdef XSI_IPC
    if (a_key == 0) {
        lock->key = tools::misc::iRandom();

        autogenerated = true;
    } else {
        lock->key = a_key;
    }

    lock->operations[0].sem_num = 0;
    lock->operations[0].sem_flg = 0;

    lock->keeper = semget(lock->key, 1, S_IRUSR | S_IWUSR | IPC_CREAT);
    if (lock->keeper == -1) {
        delete lock;

        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_CONSTRUCTOR, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
    }

    lock->control.val = 1;

    if (semctl(lock->keeper, 0, SETVAL, lock->control) == -1) {
        delete lock;

        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_CONSTRUCTOR, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
    }
#else
    lock->key = '/';

    if (a_key == 0) {
        char _key[SH_KEY_SIZE / 2 - 1];
        tools::misc::random(_key, SH_KEY_SIZE / 2 - 1);

        lock->key += dodo::string(tools::code::binToHex(dodo::string(_key, SH_KEY_SIZE / 2 - 1)));

        autogenerated = true;
    } else {
        char _key[4];
        memcpy(_key, &a_key, 4);

        lock->key += dodo::string(tools::code::binToHex(dodo::string(_key, 4)));
    }

    lock->keeper = sem_open(lock->key.data(), O_CREAT, S_IRUSR | S_IWUSR, 1);
    if (lock->keeper == SEM_FAILED) {
        delete lock;

        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_CONSTRUCTOR, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
    }
#endif
}

//-------------------------------------------------------------------

process::~process()
{
#ifdef XSI_IPC
    dodo_try {
        if (acquired() && getpid() == current) {
            lock->operations[0].sem_op = 1;

            semop(lock->keeper, lock->operations, 1);
        }
    } dodo_catch (exception::basic *e UNUSED) {
    }

    if (autogenerated)
        semctl(lock->keeper, 0, IPC_RMID);
#else
    dodo_try {
        if (acquired() && getpid() == current)
            sem_post(lock->keeper);
    } dodo_catch (exception::basic *e UNUSED) {
    }

    sem_close(lock->keeper);

    if (autogenerated)
        sem_unlink(lock->key.data());
#endif

    delete lock;
}

//-------------------------------------------------------------------

void
process::remove(int a_key)
{
#ifdef XSI_IPC
    int keeper = semget(a_key, 1, S_IRUSR | S_IWUSR);
    if (keeper == -1)
        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_REMOVE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

    if (semctl(keeper, 0, IPC_RMID) == -1)
        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_REMOVE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
#else
    dodo::string key = "/";

    char _key[4];
    memcpy(_key, &a_key, 4);

    key += dodo::string(tools::code::binToHex(dodo::string(_key, 4)));

    if (sem_unlink(key.data()) == -1)
        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_REMOVE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
#endif
}

//-------------------------------------------------------------------

bool
process::acquire(unsigned long microseconds)
{
    int pid = getpid();

    if (acquired() && pid == current) {
        ++recursive;

        return true;
    }

#ifdef XSI_IPC
    lock->operations[0].sem_op = -1;

    if (microseconds == 0) {
        if (semop(lock->keeper, lock->operations, 1) != 0)
            dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_ACQUIRE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
    } else {
        timespec ts = {microseconds/1000000, (microseconds%1000000)*1000};

        if (semtimedop(lock->keeper, lock->operations, 1, &ts) != 0) {
            if (errno == EAGAIN)
                return false;
            else
                dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_ACQUIRE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
        }
    }
#else
    if (microseconds == 0) {
        if (sem_wait(lock->keeper) != 0)
            dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_ACQUIRE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
    } else {
        timespec ts = {microseconds/1000000, (microseconds%1000000)*1000};
        timespec now;

        clock_gettime(CLOCK_REALTIME, &now);
        ts.tv_sec += now.tv_sec;
        ts.tv_nsec += now.tv_nsec;
        if (ts.tv_nsec > 999999999) {
            ts.tv_sec += 1;
            ts.tv_nsec -= 999999999;
        }

        if (sem_timedwait(lock->keeper, &ts) != 0) {
            if (errno == ETIMEDOUT)
                return false;
            else
                dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_ACQUIRE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
        }
    }
#endif

    current = pid;
    recursive = 0;

    return true;
}

//-------------------------------------------------------------------

void
process::release()
{
    if (acquired() && current == getpid() && recursive > 0) {
        --recursive;

        return;
    }

#ifdef XSI_IPC
    lock->operations[0].sem_op = 1;

    if (semop(lock->keeper, lock->operations, 1) != 0)
        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_RELEASE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
#else
    if (sem_post(lock->keeper) != 0)
        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_RELEASE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
#endif

    current = 0;
}

//-------------------------------------------------------------------

bool
process::acquired()
{
    int value;

#ifdef XSI_IPC
    value = semctl(lock->keeper, 0, GETVAL, 0);
    if (value == -1)
        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_ACQUIRED, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
#else
    if (sem_getvalue(lock->keeper, &value) != 0)
        dodo_throw exception::basic(exception::MODULE_PCSYNCPROCESS, PROCESSEX_ACQUIRED, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
#endif

    return (value == 0);
}

//-------------------------------------------------------------------


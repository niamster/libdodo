/***************************************************************************
 *            pcSyncProcess.h
 *
 *  Sun Jul 22 2007
 *  Copyright  2007  Dmytro Milinevskyy
 *  milinevskyy@gmail.com
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version 2.1 as published by
 *  the Free Software Foundation;
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/**
 * vim indentation settings
 * set tabstop=4
 * set shiftwidth=4
 */

#ifndef _PCSYNCPROCESS_H_
#define _PCSYNCPROCESS_H_ 1

#include <libdodo/directives.h>

#include <libdodo/pcSyncProtector.h>

namespace dodo {
    namespace pc {
        namespace sync {
            /**
             * @class process
             * @brief provides lock mechanism for processes
             * @note if the key was not autogenerated the semaphore is not removed from the system
             * you should call remove to remove it from the system
             */
            class process : public sync::protector {
              private:

                /**
                 * copy constructor
                 * @note to prevent copying
                 */
                process(process &);

              public:

                /**
                 * constructor
                 * @param key defines semaphore key
                 * @note if key is 0 - key will be autogenerated
                 * if you want to share semaphore between different instances of process - set own key,
                 * otherwise(like fork) - it may be autogenerated
                 */
                process(int key);

                /**
                 * destructor
                 */
                virtual ~process();

                /**
                 * lock
                 * @return false if lock was not acquired within given timeout
                 * @param timeout defines wait timeout for unlock in microseconds
                 * @note if timeout is 0 it will wait infinitely
                 */
                virtual bool acquire(unsigned long timeout = 0);

                /**
                 * unlock
                 */
                virtual void release();

                /**
                 * remove the semaphore from the system
                 * @param key defines the key of the semaphore
                 */
                static void remove(int key);

              protected:

                /**
                 * @return true if the lock is acquired
                 */
                virtual bool acquired();

                struct __lock__;
                __lock__ *lock;

                bool autogenerated;             ///< true if key was autogenerated

                int current;                    ///< current process holding section
                int recursive;                  ///< depth of accuire recursion of current process
            };
        };
    };
};
#endif


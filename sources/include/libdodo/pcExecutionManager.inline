/***************************************************************************
 *            pcExecutionManager.inline
 *
 *  Sun Oct  30 2007
 *  Copyright  2007  Ni@m
 *  niam.niam@gmail.com
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version 2.1 as published by
 *  the Free Software Foundation;
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/**
 * vim indentation settings
 * set tabstop=4
 * set shiftwidth=4
 */

#include <libdodo/directives.h>

#include <libdodo/pcExecutionManager.h>
#include <libdodo/pcExecutionManagerEx.h>
#include <libdodo/types.h>
#include <libdodo/pcSyncThread.h>
#include <libdodo/pcSyncStack.h>

template <typename T>
dodo::pc::execution::manager<T>::manager() : counter(0),
                                             keeper(new pc::sync::thread)
{
}

//-------------------------------------------------------------------

template <typename T>
dodo::pc::execution::manager<T>::~manager()
{
    delete keeper;
}

//-------------------------------------------------------------------

template <typename T>
unsigned long
dodo::pc::execution::manager<T>::add(const T &job)
{
    pc::sync::stack tg(keeper);

    handles.insert(make_pair(counter, job));

    return counter++;
}

//-------------------------------------------------------------------

template <typename T>
void
dodo::pc::execution::manager<T>::remove(unsigned long id,
                                       bool          terminate)
{
    pc::sync::stack tg(keeper);

    typename dodoMap<unsigned long, T>::iterator job = handles.find(id);

    if (job == handles.end())
        return;

    if (terminate && job->second.isRunning())
        job->second.stop();

    handles.erase(job);
}

//-------------------------------------------------------------------

template <typename T>
void
dodo::pc::execution::manager<T>::run(unsigned long id)
{
    pc::sync::stack tg(keeper);

    typename dodoMap<unsigned long, T>::iterator job = handles.find(id);

    if (job == handles.end())
        throw exception::basic(exception::MODULE_PCEXECUTIONMANAGER, MANAGEREX_RUN, exception::ERRNO_LIBDODO, MANAGEREX_NOTFOUND, PCEXECUTIONMANAGEREX_NOTFOUND_STR, __LINE__, __FILE__);

    job->second.run();
}

//-------------------------------------------------------------------

template <typename T>
void
dodo::pc::execution::manager<T>::stop(unsigned long id)
{
    pc::sync::stack tg(keeper);

    typename dodoMap<unsigned long, T>::iterator job = handles.find(id);

    if (job == handles.end())
        throw exception::basic(exception::MODULE_PCEXECUTIONMANAGER, MANAGEREX_STOP, exception::ERRNO_LIBDODO, MANAGEREX_NOTFOUND, PCEXECUTIONMANAGEREX_NOTFOUND_STR, __LINE__, __FILE__);

    job->second.stop();
}

//-------------------------------------------------------------------

template <typename T>
void
dodo::pc::execution::manager<T>::stop()
{
    pc::sync::stack tg(keeper);

    typename dodoMap<unsigned long, T>::iterator i = handles.begin(), j = handles.end();

    for (; i != j; ++i)
        i->second.stop();
}

//-------------------------------------------------------------------

template <typename T>
int
dodo::pc::execution::manager<T>::wait(unsigned long id)
{
    pc::sync::stack tg(keeper);

    typename dodoMap<unsigned long, T>::iterator job = handles.find(id);

    if (job == handles.end())
        throw exception::basic(exception::MODULE_PCEXECUTIONMANAGER, MANAGEREX_WAIT, exception::ERRNO_LIBDODO, MANAGEREX_NOTFOUND, PCEXECUTIONMANAGEREX_NOTFOUND_STR, __LINE__, __FILE__);

    return job->second.wait();
}

//-------------------------------------------------------------------

template <typename T>
void
dodo::pc::execution::manager<T>::wait()
{
    pc::sync::stack tg(keeper);

    typename dodoMap<unsigned long, T>::iterator i = handles.begin(), j = handles.end();

    for (; i != j; ++i)
        i->second.wait();
}

//-------------------------------------------------------------------

template <typename T>
bool
dodo::pc::execution::manager<T>::isRunning(unsigned long id) const
{
    pc::sync::stack tg(keeper);

    typename dodoMap<unsigned long, T>::const_iterator job = handles.find(id);

    if (job == handles.end())
        throw exception::basic(exception::MODULE_PCEXECUTIONMANAGER, MANAGEREX_ISRUNNING, exception::ERRNO_LIBDODO, MANAGEREX_NOTFOUND, PCEXECUTIONMANAGEREX_NOTFOUND_STR, __LINE__, __FILE__);

    return job->second.isRunning();
}

//-------------------------------------------------------------------

template <typename T>
unsigned long
dodo::pc::execution::manager<T>::running() const
{
    pc::sync::stack tg(keeper);

    unsigned long jobs;

    typename dodoMap<unsigned long, T>::const_iterator i = handles.begin(), j = handles.end();

    for (; i != j; ++i)
        if (i->second.isRunning())
            ++jobs;

    return jobs;
}

//-------------------------------------------------------------------

template <typename T>
dodoList<unsigned long>
dodo::pc::execution::manager<T>::jobs()
{
    pc::sync::stack tg(keeper);

    dodoList<unsigned long> jobs;

    typename dodoMap<unsigned long, T>::const_iterator i = handles.begin(), j = handles.end();

    for (; i != j; ++i)
        jobs.push_back(i->first);

    return jobs;
}

//-------------------------------------------------------------------

template <typename T>
T *
dodo::pc::execution::manager<T>::job(unsigned long id)
{
    pc::sync::stack tg(keeper);

    typename dodoMap<unsigned long, T>::const_iterator job = handles.find(id);

    if (job == handles.end())
        throw exception::basic(exception::MODULE_PCEXECUTIONMANAGER, MANAGEREX_JOB, exception::ERRNO_LIBDODO, MANAGEREX_NOTFOUND, PCEXECUTIONMANAGEREX_NOTFOUND_STR, __LINE__, __FILE__);

    return (T *)&job->second;
}

//-------------------------------------------------------------------

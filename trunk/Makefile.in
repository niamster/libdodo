
prefix:=@prefix@
datarootdir:=@datarootdir@
exec_prefix:=@exec_prefix@
mandir:=@mandir@
libdir:=@libdir@
bindir:=@bindir@
includedir:=@includedir@

CXX:=@CXX@
INSTALL:=@INSTALL@
LN_S = @LN_S@

CPPFLAGS:=-I./include @CPPFLAGS@
LDFLAGS:= -L./ @LDFLAGS@ -lrt
CFLAGS:=@CFLAGS@
DEFINES:=-D_REENTRANT -D_GNU_SOURCE -D__USE_UNIX98 -D_XOPEN_SOURCE=600 \
	-D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_THREAD_SAFE \
	@DEFS@

###########################################################

OBJECTS:=dbBase.o \
		guard.o \
		atomicLock.o \
		atomicMutex.o \
		atomicSemaphore.o \
		tools.o \
		json.o \
		types.o \
		stringTools.o \
		xexec.o \
		dbSqlBase.o \
		baseEx.o \
		dbMysql.o \
		cgi.o \
		regexp.o \
		logger.o \
		ioNetworkOptions.o \
		ioNetworkExchange.o \
		ioNetworkTools.o \
		ioNetwork.o \
		ioDiskTools.o \
		ioDisk.o \
		ioSTD.o \
		systemTools.o \
		timeTools.o \
		xml.o \
		rpc.o \
		image.o \
		dbSqlite.o \
		systemProcessCollection.o \
		systemThreadCollection.o \
		systemJobCollection.o \
		threadGuard.o \
		processGuard.o \
		systemThreadSharedDataGuard.o \
		systemProcessSharedDataGuard.o \
		systemSharedDataGuard.o \
		systemSharedData.o \
		systemThreadSharedDataCollectionGuard.o \
		systemProcessSharedDataCollectionGuard.o \
		systemSharedDataCollectionGuard.o \
		dbPostgresql.o \
		cgiPreprocessor.o \
		io.o \
		ioHTTP.o \
		db.o \
		cgiFast.o \
		cgiProcessor.o \
		ioNonBlockedAccess.o \
		systemLibraryLoader.o \
		ioNonBlockedAccessInfo.o

###########################################################

VPATH:=src/

all: @PACKAGE_NAME@

@PACKAGE_NAME@: $(OBJECTS)
	$(CXX) $(LDFLAGS) -shared -Wl,-soname,$@.so.@PACKAGE_VERSION@ -o $@.so.@PACKAGE_VERSION@ $(OBJECTS)
	if test "@DEBUG@" = "no"; then strip -d --strip-unneeded @PACKAGE_NAME@.so.@PACKAGE_VERSION@; fi
	ln -sf @PACKAGE_NAME@.so.@PACKAGE_VERSION@ $@.so
	
	@echo ""
	@echo ""
	@echo "Now you can run 'gmake install'."

.cc.o:
	$(CXX) $(DEFINES) $(CPPFLAGS) $(CFLAGS) -fPIC -c $^
	if test "@DEBUG@" = "no"; then strip -d --strip-unneeded $@; fi

install: @PACKAGE_NAME@ 
	${INSTALL} -m 755 -d $(libdir)
	${INSTALL} -m 755 @PACKAGE_NAME@.so.@PACKAGE_VERSION@ $(libdir)/
	${INSTALL} -m 755 -d $(includedir)/libdodo
	cd include/libdodo; for i in ./*; do ${INSTALL} -m 755 $$i $(includedir)/libdodo; done; cd ..

	${INSTALL} -m 755 -d $(bindir)
	${INSTALL} -m 755 bin/dodo-config $(bindir)/
	
	$(LN_S) -f $(libdir)/@PACKAGE_NAME@.so.@PACKAGE_VERSION@ $(libdir)/@PACKAGE_NAME@.so
	
	@echo ""
	@echo ""
	@echo "Use libdodo with pleasure"
	@echo ""
	@echo ""

uninstall:
	rm -f $(libdir)/@PACKAGE_NAME@.so.@PACKAGE_VERSION@
	rm -f $(libdir)/@PACKAGE_NAME@.so
	rmdir $(libdir)
	
	cd i$(ncludedir)/libdodo; for i in ./*; do rm -f $(includedir)/$$i; done; cd ..
	rmdir $(includedir)/libdodo
	rmdir $(includedir)

	rm -f $(bindir)/dodo-config
	rmdir $(bindir)/dodo-config
	
	rmdir $(prefix)
clean:
	rm -rf *.o *.so* *.a*

force : clean @PACKAGE_NAME@


AC_PREREQ(2.60)
AC_INIT(libdodo, 0.4.0, libdodo.sf.net)

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_INSTALL

AC_SYS_LARGEFILE

echo "" > include/libdodo/directives.runtime.h

CPPFLAGS="$CPPFLAGS -I/usr/local/include"
LDFLAGS="$LDFLAGS -L/usr/local/lib"

RESULT="\n\n"

AC_SUBST(DEBUG)
DEBUG="no"
AC_ARG_ENABLE(debug,
	AS_HELP_STRING([--enable-debug],[enable debug info]),
	[DEBUG="$enableval"])

if test "$DEBUG" = "yes"
then
	CFLAGS="$CFLAGS -g -DDEBUG"
	
	RESULT="$RESULT\nDebug\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nDebug\t\t\t\t\t\tdisabled"
fi

PROFILING="no"
AC_ARG_ENABLE(profiling,
        AS_HELP_STRING([--enable-profiling],[enable profiling]),
        [PROFILING="$enableval"])

if test "$PROFILING" = "yes"
then
	CFLAGS="$CFLAGS -pg"
	
	RESULT="$RESULT\nProfiling\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nProfiling\t\t\t\t\t\tdisabled"
fi

AC_ARG_ENABLE(deque,
        AS_HELP_STRING([--disable-deque],[use std::vector instead of std::deque(std::deque used by default)]),
        [DEQUE="$enableval"], [DEQUE="yes"])

if test "$DEQUE" = "yes"
then
	echo -n -e "#define USE_DEQUE\n\n" >> include/libdodo/directives.runtime.h        
	
	RESULT="$RESULT\nDeque\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nDeque\t\t\t\t\t\tdisabled"
fi

# Checks for libraries.
	AC_ARG_WITH([sqlite3],
		AS_HELP_STRING([--with-sqlite3(=/path)],[use sqlite3]),
		[MOD_SQLITE_DIR="$withval"], [MOD_SQLITE="no"])
	if test "$MOD_SQLITE" != "no"
	then
		if test "$MOD_SQLITE_DIR" = "yes"
		then
			MOD_SQLITE_DIR=/usr
		fi
		CPPFLAGS="$CPPFLAGS -I$MOD_SQLITE_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_SQLITE_DIR/lib -lsqlite3"
		AC_CHECK_LIB([sqlite3], [sqlite3_table_column_metadata], RESULT="$RESULT\nSQLite auto-framing\t\t\t\t\t\tenabled", RESULT="$RESULT\nSQLite auto-framing\t\t\t\t\t\tdisabled")
		AC_CHECK_LIB([sqlite3], [sqlite3_exec])
		AC_CHECK_HEADER([sqlite3.h])
		echo -n -e "#define SQLITE_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nSQLite\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nSQLite\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([postgresql],
		AS_HELP_STRING([--with-postgresql(=/path)],[use postgresql]),
		[MOD_POSTGRESQL_DIR="$withval"], [MOD_POSTGRESQL="no"])
	if test "$MOD_POSTGRESQL" != "no"
	then
		if test "$MOD_POSTGRESQL_DIR" = "yes"
		then
			MOD_POSTGRESQL_DIR=/usr
		fi
		CPPFLAGS="$CPPFLAGS -I$MOD_POSTGRESQL_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_POSTGRESQL_DIR/lib -lpq"
		AC_CHECK_LIB([pq], [PQclear])
		AC_CHECK_HEADER([libpq-fe.h])
		echo -n -e "#define POSTGRESQL_EXT\n\n" >> include/libdodo/directives.runtime.h

		RESULT="$RESULT\nPostresql\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nPostgresql\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([mysql],
		AS_HELP_STRING([--with-mysql(=/path)],[use mysql]),
		[MOD_MYSQL_DIR="$withval"], [MOD_MYSQL="no"])
	if test "$MOD_MYSQL" != "no"
	then
		if test "$MOD_MYSQL_DIR" = "yes"
		then
			CPPFLAGS="$CPPFLAGS $(mysql_config --cflags)"
			LDFLAGS="$LDFLAGS $(mysql_config --libs)"
		else
			MOD_MYSQL_DIR=/usr
			CPPFLAGS="$CPPFLAGS -I$MOD_MYSQL_DIR/include"
			LDFLAGS="$LDFLAGS -L$MOD_MYSQL_DIR/lib -lmysqlclient"
		fi
		AC_CHECK_LIB([mysqlclient], [mysql_init])
		AC_CHECK_HEADER([mysql.h])
		echo -n -e "#define MYSQL_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nMySQL\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nMySQL\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([fcgi],
		AS_HELP_STRING([--with-fcgi(=/path)],[use fast CGI]),
		[MOD_FCGI_DIR="$withval"], [MOD_FCGI="no"])
	if test "$MOD_FCGI" != "no"		
	then
		if test "$MOD_FCGI_DIR" = "yes"
		then
			MOD_FCGI_DIR=/usr
		fi
		CPPFLAGS="$CPPFLAGS -I$MOD_FCGI_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_FCGI_DIR/lib -lfcgi"
		AC_CHECK_LIB([fcgi], [FCGX_Init])
		AC_CHECK_HEADER([fcgiapp.h])
		echo -n -e "#define FCGI_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nFastCGI\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nFastCGI\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([pcre],
		AS_HELP_STRING([--with-pcre(=/path)],[use pcre]),
		[MOD_PCRE_DIR="$withval"], [MOD_PCRE="no"])
	if test "$MOD_PCRE" != "no"
	then
		if test "$MOD_PCRE_DIR" = "yes"
		then
			CPPFLAGS="$CPPFLAGS $(pcre-config --cflags)"
			LDFLAGS="$LDFLAGS $(pcre-config --libs)"
		else
			MOD_PCRE_DIR=/usr
			CPPFLAGS="$CPPFLAGS -I$MOD_PCRE_DIR/include"
			LDFLAGS="$LDFLAGS -L$MOD_PCRE_DIR/lib -lpcre"
		fi
		AC_CHECK_LIB([pcre], [pcre_exec])
		AC_CHECK_HEADER([pcre.h])
		echo -n -e "#define PCRE_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nPCRE\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nPCRE\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([dl],
		AS_HELP_STRING([--with-dl(=/path)],[use dl]),
		[MOD_DL_DIR="$withval"], [MOD_DL="no"])
	if test "$MOD_DL" != "no"
	then
		if test "$MOD_DL_DIR" = "yes"
		then
			MOD_DL_DIR=/usr
		fi
		CPPFLAGS="$CPPFLAGS -I$MOD_DL_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_DL_DIR/lib"
		AC_CHECK_HEADER([dlfcn.h])
                AC_ARG_ENABLE([dl-lib],
                        AS_HELP_STRING([--disable-dl-lib], [disable dl as lib (default=enabled)]),
                        [MOD_DL_LIB="$enableval"], [MOD_DL_LIB="no"])
                if test "$MOD_DL_LIB" = "yes"
                then
			AC_CHECK_LIB([dl], [dlopen], RESULT="$RESULT\nDynamic linking as lib\t\t\t\t\t\tenabled", RESULT="$RESULT\nDynamic linking as lib\t\t\t\t\t\tdisabled")
			LDFLAGS="$LDFLAGS -ldl"
		fi
		echo -n -e "#define DL_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nDynamic linking\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nDynamic linking\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([libxml2],
		AS_HELP_STRING([--with-libxml2(=/path)],[use libxml2]),
		[MOD_LIBXML2_DIR="$withval"], [MOD_LIBXML2="no"])
	if test "$MOD_LIBXML2" != "no"
	then
		if test "$MOD_LIBXML2_DIR" = "yes"
		then
			CPPFLAGS="$CPPFLAGS $(xml2-config --cflags)"
			LDFLAGS="$LDFLAGS $(xml2-config --libs)"
		else
			MOD_LIBXML2_DIR=/usr
			CPPFLAGS="$CPPFLAGS -I$MOD_LIBXML2_DIR/include/libxml2"
			LDFLAGS="$LDFLAGS -L$MOD_LIBXML2_DIR/lib -lxml2"
		fi
		AC_CHECK_HEADER([libxml/xmlmemory.h])
		AC_CHECK_LIB([xml2], [xmlInitParser])
		echo -n -e "#define LIBXML2_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nlibxml2\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nlibxml2\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([pthread],
		AS_HELP_STRING([--with-pthread(=/path)],[use pthread]),
		[MOD_PTHREAD_DIR="$withval"], [MOD_PTHREAD="no"])
	if test "$MOD_PTHREAD" != "no"
	then
		if test "$MOD_PTHREAD_DIR" = "yes"
		then
			MOD_PTHREAD_DIR=/usr
		fi
        	AC_ARG_WITH([pthread-lib],
		AS_HELP_STRING([--with-pthread-lib],[use pthread lib(pthread, thr, lthread, c_r) (default=pthread)]),
		[MOD_PTHREAD_LIB="$withval"], [MOD_PTHREAD_LIB="pthread"])
		CPPFLAGS="$CPPFLAGS -I$MOD_PTHREAD_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_PTHREAD_DIR/lib -l$MOD_PTHREAD_LIB"
		AC_CHECK_LIB([$MOD_PTHREAD_LIB], [pthread_create])
		AC_CHECK_HEADER([pthread.h])
		echo -n -e "#define PTHREAD_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\npthread\t\t\t\t\t\tenabled($MOD_PTHREAD_LIB)"
	else
		RESULT="$RESULT\npthread\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([bzip2],
		AS_HELP_STRING([--with-bzip2(=/path)],[use bzip2]),
		[MOD_BZIP2_DIR="$withval"], [MOD_BZIP2="no"])
	if test "$MOD_BZIP2" != "no"
	then
		if test "$MOD_BZIP2_DIR" = "yes"
		then
			MOD_BZIP2_DIR=/usr
		fi
		CPPFLAGS="$CPPFLAGS -I$MOD_BZIP2_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_BZIP2_DIR/lib -lbz2"
		AC_CHECK_LIB([bz2], [BZ2_bzBuffToBuffCompress])
		AC_CHECK_HEADER([bzlib.h])
		echo -n -e "#define BZIP2_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nBZIP2\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nBZIP2\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([zlib],
		AS_HELP_STRING([--with-zlib(=/path)],[use zlib]),
		[MOD_ZLIB_DIR="$withval"], [MOD_ZLIB="no"])
	if test "$MOD_ZLIB" != "no"
	then
		if test "$MOD_ZLIB_DIR" = "yes"
		then
			MOD_ZLIB_DIR=/usr
		fi
		CPPFLAGS="$CPPFLAGS -I$MOD_ZLIB_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_ZLIB_DIR/lib"
		AC_CHECK_HEADER([zlib.h])
		AC_ARG_ENABLE([zlib-lib],
			AS_HELP_STRING([--enable-zlib-lib], [enable zlib as lib (default=disabled)]),
			[MOD_ZLIB_LIB="yes"])
	        if test "$MOD_ZLIB_LIB" = "yes"
		then
			AC_CHECK_LIB([z], [deflateInit2])
			LDFLAGS="$LDFLAGS -lz"
		fi
		echo -n -e "#define ZLIB_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nZLIB\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nZLIB\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([iconv],
		AS_HELP_STRING([--with-iconv(=/path)],[use iconv]),
		[MOD_ICONV_DIR="$withval"], [MOD_ICONV="no"])
	if test "$MOD_ICONV" != "no"
	then
		if test "$MOD_ICONV_DIR" = "yes"
		then
			MOD_ICONV_DIR=/usr
		fi
		CPPFLAGS="$CPPFLAGS -I$MOD_ICONV_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_ICONV_DIR/lib"
		AC_CHECK_HEADER([iconv.h])
		AC_ARG_ENABLE([iconv-lib],
			AS_HELP_STRING([--enable-iconv-lib], [enable iconv as lib (default=disabled)]),
			[MOD_ICONV_LIB="yes"])
	        if test "$MOD_ICONV_LIB" = "yes"
		then
			AC_CHECK_LIB([iconv], [iconv])
			LDFLAGS="$LDFLAGS -liconv"
		fi
		echo -n -e "#define ICONV_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\niconv\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\niconv\t\t\t\t\t\tdisabled"
	fi

	AC_ARG_WITH([imagemagick],
		AS_HELP_STRING([--with-imagemagick(=/path)],[use ImageMagick]),
		[MOD_IMAGEMAGICK_DIR="$withval"], [MOD_IMAGEMAGICK="no"])
	if test "$MOD_IMAGEMAGICK" != "no"
	then
		if test "$MOD_IMAGEMAGICK_DIR" = "yes"
		then
			CPPFLAGS="$CPPFLAGS $(Magick-config --cppflags)"
			LDFLAGS="$LDFLAGS $(Magick-config --ldflags) $(Magick-config --libs)"
		else
			MOD_ICONV_DIR=/usr
			CPPFLAGS="$CPPFLAGS -I$MOD_IMAGEMAGICK_DIR/include"
			LDFLAGS="$LDFLAGS -L$MOD_IMAGEMAGICK_DIR/lib -lMagick"
		fi
		AC_CHECK_LIB([Magick], [MagickCoreGenesis])
		AC_CHECK_HEADER([magick/MagickCore.h])
		echo -n -e "#define IMAGEMAGICK_EXT\n\n" >> include/libdodo/directives.runtime.h
		
		RESULT="$RESULT\nImageMagick\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nImageMagick\t\t\t\t\t\tdisabled"
	fi

# Checks for header files.
AC_HEADER_SYS_WAIT
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_STAT
AC_HEADER_TIME

AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h stdlib.h string.h sys/ioctl.h sys/socket.h sys/time.h unistd.h utime.h poll.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

AC_STRUCT_TM

AC_PROG_GCC_TRADITIONAL

AC_CONFIG_FILES([Makefile
		 bin/dodo-config
                 tests/Makefile
                 tests/image_test/Makefile
                 tests/json_test/Makefile
                 tests/STD_test/Makefile
                 tests/cgiFast_test/Makefile
                 tests/cgi_test/Makefile
                 tests/dbinterface_test/Makefile
                 tests/disk_test/Makefile
                 tests/glob_test/Makefile
                 tests/mysql_test/Makefile
                 tests/postgresql_test/Makefile
                 tests/regexp_test/Makefile
                 tests/socketNB_test/Makefile
                 tests/socketThreads_test/Makefile
                 tests/socket_test/Makefile
                 tests/sqlite_test/Makefile
                 tests/systemThreads_test/Makefile
                 tests/systemProcesses_test/Makefile
                 tests/systemJobs_test/Makefile
                 tests/systemTools_test/Makefile
                 tests/timeTools_test/Makefile
                 tests/xexec.module_test/Makefile
                 tests/xml_test/Makefile])

AC_OUTPUT

chmod +x bin/dodo-config

echo -e $RESULT

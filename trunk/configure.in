
AC_PREREQ(2.60)

##
# project identity
##

AC_INIT(libdodo, 0.11.0, libdodo.org)

OS=$(uname)

AC_SUBST(SO_VERSION)

case "$OS" in
	FreeBSD) SO_VERSION=${PACKAGE_VERSION#*.}; SO_VERSION=${SO_VERSION%.*} ;;
	Linux) SO_VERSION=${PACKAGE_VERSION} ;;
esac

##
# default options
##

AC_PREFIX_DEFAULT(/usr)

##
# checking programs
##

AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_PROG_GCC_TRADITIONAL
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_INSTALL

##
# functions
##

function add_ldflags_libdir()
{
	for i in $*
	do
		case $i in
			-L*)
				LDFLAGS="$LDFLAGS $i"
				;;
		esac
	done
}

##
# checking dependencies/build options
##

cat > include/libdodo/directives.runtime.h  <<EOF
/***************************************************************************
*            directives.runtime.h
****************************************************************************/

#ifndef _DIRECTIVES_RUNTIME_H_
#define _DIRECTIVES_RUNTIME_H_ 1

EOF

CPPFLAGS="$CPPFLAGS -I/usr/include -I/usr/local/include"
LDFLAGS="$LDFLAGS -L/usr/lib -L/usr/local/lib"
CFLAGS="$CFLAGS -D_REENTRANT -D_GNU_SOURCE -D__BSD_VISIBLE -D__POSIX_VISIBLE=200112 -D_POSIX_VERSION=200112 -D__USE_UNIX98 -D_XOPEN_SOURCE=600 -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_THREAD_SAFE"

RESULT="\n\n"

AC_SUBST(DEBUG)
AC_ARG_ENABLE(debug,
	AS_HELP_STRING([--enable-debug], [enable debug info]), [DEBUG="$enableval"], [DEBUG="no"])
if test "$DEBUG" = "yes"
then
	CFLAGS="$CFLAGS -g -DDEBUG"
	
	RESULT="$RESULT\nDebug\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nDebug\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_ENABLE(profiling,
	AS_HELP_STRING([--enable-profiling], [enable profiling]), [PROFILING="$enableval"], [PROFILING="no"])
if test "$PROFILING" = "yes"
then
	CFLAGS="$CFLAGS -pg"
	
	RESULT="$RESULT\nProfiling\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nProfiling\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_ENABLE(libwrap,
	AS_HELP_STRING([--disable-libwrap], [disable libwrap support]), [LIBWRAP="$enableval"], [LIBWRAP="yes"])
if test "$LIBWRAP" = "yes"
then
	AC_CHECK_LIB([wrap], [hosts_access], [LIBWRAP="yes"], [LIBWRAP="no"; AC_MSG_WARN(libwrap lib was not found)])
	if test "$LIBWRAP" = "yes"
	then
		LDFLAGS="$LDFLAGS -lwrap"
		
		RESULT="$RESULT\nlibwrap\t\t\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nlibwrap\t\t\t\t\t\t\t\tdisabled"
	fi
else
	RESULT="$RESULT\nlibwrap\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_ENABLE(deque,
	AS_HELP_STRING([--disable-deque], [use std::vector instead of std::deque]), [DEQUE="$enableval"], [DEQUE="yes"])
if test "$DEQUE" = "yes"
then
	echo -n -e "#define USE_DEQUE 1\n\n" >> include/libdodo/directives.runtime.h        
	
	RESULT="$RESULT\nDeque\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nDeque\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_ENABLE(io-xexec,
	AS_HELP_STRING([--disable-io-xexec], [compile io:: w/o xexec support]), [IO_W_XEXEC="$enableval"], [IO_W_XEXEC="yes"])
if test "$IO_W_XEXEC" = "no"
then
	echo -n -e "#define IO_WO_XEXEC 1\n\n" >> include/libdodo/directives.runtime.h        
	RESULT="$RESULT\nio::stdio xexec support\t\t\t\t\t\tdisabled"
	RESULT="$RESULT\nio::network::exchange xexec support\t\t\t\tdisabled"
	RESULT="$RESULT\nio::network::client xexec support\t\t\t\tdisabled"
	RESULT="$RESULT\nio::network::server xexec support\t\t\t\tdisabled"
	RESULT="$RESULT\nio::pipe xexec support\t\t\t\t\t\tdisabled"
	RESULT="$RESULT\nio::file::fifo xexec support\t\t\t\t\tdisabled"
	RESULT="$RESULT\nio::file::temp xexec support\t\t\t\t\tdisabled"
	RESULT="$RESULT\nio::file::regular xexec support\t\t\t\t\tdisabled"
else
	RESULT="$RESULT\nio::stdio xexec support\t\t\t\t\t\tenabled"
	RESULT="$RESULT\nio::network::exchange xexec support\t\t\t\tenabled"
	RESULT="$RESULT\nio::network::client xexec support\t\t\t\tenabled"
	RESULT="$RESULT\nio::network::server xexec support\t\t\t\tenabled"
	RESULT="$RESULT\nio::pipe xexec support\t\t\t\t\t\tenabled"
	RESULT="$RESULT\nio::file::fifo xexec support\t\t\t\t\tenabled"
	RESULT="$RESULT\nio::file::temp xexec support\t\t\t\t\tenabled"
	RESULT="$RESULT\nio::file::regular xexec support\t\t\t\t\tenabled"
fi

AC_ARG_ENABLE(database-xexec,
	AS_HELP_STRING([--disable-database-xexec], [compile data::base:: w/o xexec support]), [DATABASE_W_XEXEC="$enableval"], [DATABASE_W_XEXEC="yes"])
if test "$DATABASE_W_XEXEC" = "no"
then
	echo -n -e "#define DATABASE_WO_XEXEC 1\n\n" >> include/libdodo/directives.runtime.h        
fi

AC_CHECK_LIB([rt], [shm_open], [], AC_MSG_ERROR(rt lib was not found))
LDFLAGS="$LDFLAGS -lrt"

AC_ARG_WITH([sqlite3],
	AS_HELP_STRING([--with-sqlite3@<:@=DIR@:>@], [use sqlite3]), [MOD_SQLITE3_DIR="$withval"], [MOD_SQLITE3="no"])
if test "$MOD_SQLITE3" != "no" -a "$MOD_SQLITE3_DIR" != "no"
then
	if test "$MOD_SQLITE3_DIR" = "yes"
	then
		MOD_SQLITE3_DIR=/usr
	fi
	CPPFLAGS="$CPPFLAGS -I$MOD_SQLITE3_DIR/include"
	LDFLAGS="$LDFLAGS -L$MOD_SQLITE3_DIR/lib -lsqlite3"

	AC_CHECK_LIB([sqlite3], [sqlite3_exec], [], AC_MSG_ERROR(sqlite3 lib was not found))
	AC_CHECK_HEADER([sqlite3.h], [], AC_MSG_ERROR(sqlite3 header was not found))
	echo -n -e "#define SQLITE3_EXT 1\n\n" >> include/libdodo/directives.runtime.h
	
	RESULT="$RESULT\nSQLite\t\t\t\t\t\t\t\tenabled"

	if test "$DATABASE_W_XEXEC" = "no"
	then
		RESULT="$RESULT\ndata::base::sqlite xexec support\t\t\t\tdisabled"
	else
		RESULT="$RESULT\ndata::base::sqlite xexec support\t\t\t\tenabled"
	fi
else
	RESULT="$RESULT\nSQLite\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([openssl],
	AS_HELP_STRING([--with-openssl@<:@=DIR@:>@], [use openssl]), [MOD_OPENSSL_DIR="$withval"], [MOD_OPENSSL="no"])
if test "$MOD_OPENSSL" != "no" -a "$MOD_OPENSSL_DIR" != "no"
then
	if test "$MOD_OPENSSL_DIR" = "yes"
	then
		MOD_OPENSSL_DIR=/usr
	fi
	CPPFLAGS="$CPPFLAGS -I$MOD_OPENSSL_DIR/include"
	LDFLAGS="$LDFLAGS -L$MOD_OPENSSL_DIR/lib -lssl"
	AC_CHECK_LIB([ssl], [SSL_library_init], [], AC_MSG_ERROR(openssl lib was not found))
	AC_CHECK_HEADER([openssl/ssl.h], [], AC_MSG_ERROR(openssl header was not found))
	echo -n -e "#define OPENSSL_EXT 1\n\n" >> include/libdodo/directives.runtime.h

	if test "$IO_W_XEXEC" = "no"
	then
		RESULT="$RESULT\nio::network::ssl::exchange xexec support\t\t\tdisabled"
	else
		RESULT="$RESULT\nio::network::ssl::exchange xexec support\t\t\tenabled"
	fi

	if test "$IO_W_XEXEC" = "no"
	then
		RESULT="$RESULT\nio::network::ssl::client xexec support\t\t\t\tdisabled"
	else
		RESULT="$RESULT\nio::network::ssl::client xexec support\t\t\t\tenabled"
	fi

	if test "$IO_W_XEXEC" = "no"
	then
		RESULT="$RESULT\nio::network::ssl::server xexec support\t\t\t\tdisabled"
	else
		RESULT="$RESULT\nio::network::ssl::server xexec support\t\t\t\tenabled"
	fi

	RESULT="$RESULT\nOpenSSL\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nOpenSSL\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([bfd],
	AS_HELP_STRING([--with-bfd@<:@=DIR@:>@], [support library name resolution]), [MOD_BFD_DIR="$withval"], [MOD_BFD="no"])
if test "$MOD_BFD" != "no" -a "$MOD_BFD_DIR" != "no"
then
	if test "$MOD_BFD_DIR" = "yes"
	then
		MOD_BFD_DIR=/usr
	fi
	CPPFLAGS="$CPPFLAGS -I$MOD_BFD_DIR/include"
	LDFLAGS="$LDFLAGS -L$MOD_BFD_DIR/lib -lbfd"
	AC_CHECK_LIB([bfd], [bfd_fopen], [], AC_MSG_ERROR(bfd lib was not found))
	AC_CHECK_HEADER([bfd.h], [], AC_MSG_ERROR(bfd header was not found))
	echo -n -e "#define BFD_EXT 1\n\n" >> include/libdodo/directives.runtime.h

	RESULT="$RESULT\nLibrary name resolution\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nLibrary name resolution\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([postgresql],
	AS_HELP_STRING([--with-postgresql@<:@=DIR@:>@], [use postgresql]), [MOD_POSTGRESQL_DIR="$withval"], [MOD_POSTGRESQL="no"])
if test "$MOD_POSTGRESQL" != "no" -a "$MOD_POSTGRESQL_DIR" != "no"
then
	if test "$MOD_POSTGRESQL_DIR" = "yes"
	then
		if test "$(pg_config 2>/dev/null)" != ""
		then
			CPPFLAGS="$CPPFLAGS -I$(pg_config --includedir)"
			LDFLAGS="$LDFLAGS -L$(pg_config --libdir) -lpq"
		else
			MOD_POSTGRESQL_DIR=/usr
			CPPFLAGS="$CPPFLAGS -I$MOD_POSTGRESQL_DIR/include -I$MOD_POSTGRESQL_DIR/include/postgresql"
			LDFLAGS="$LDFLAGS -L$MOD_POSTGRESQL_DIR/lib -lpq"
		fi
	else
		CPPFLAGS="$CPPFLAGS -I$MOD_POSTGRESQL_DIR/include -I$MOD_POSTGRESQL_DIR/include/postgresql"
		LDFLAGS="$LDFLAGS -L$MOD_POSTGRESQL_DIR/lib -lpq"
	fi
	AC_CHECK_LIB([pq], [PQexecParams], [], AC_MSG_ERROR(postgresql lib was not found))
	AC_CHECK_HEADER([libpq-fe.h], [], AC_MSG_ERROR(postgresql header was not found))
	
	AC_LANG_PUSH(C++)
	AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[#include <libpq-fe.h>]], [[pg_encoding_to_char(0);]]), [], [echo -n -e "#define POSTGRESQL_NO_ENCODINGTOCHAR 1\n\n" >> include/libdodo/directives.runtime.h])
	AC_LANG_POP()

	echo -n -e "#define POSTGRESQL_EXT 1\n\n" >> include/libdodo/directives.runtime.h

	if test "$DATABASE_W_XEXEC" = "no"
	then
		RESULT="$RESULT\ndata::base::postgresql xexec support\t\t\t\tdisabled"
	else
		RESULT="$RESULT\ndata::base::postgresql xexec support\t\t\t\tenabled"
	fi

	RESULT="$RESULT\nPostgresql\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nPostgresql\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([mysql],
	AS_HELP_STRING([--with-mysql@<:@=DIR@:>@], [use mysql]), [MOD_MYSQL_DIR="$withval"], [MOD_MYSQL="no"])
if test "$MOD_MYSQL" != "no" -a "$MOD_MYSQL_DIR" != "no"
then
	if test "$MOD_MYSQL_DIR" = "yes"
	then
		if test "$(mysql_config 2>/dev/null)" != ""
		then
			CPPFLAGS="$CPPFLAGS $(mysql_config --cflags)"
			add_ldflags_libdir $(mysql_config --libs)
			LDFLAGS="$LDFLAGS -lmysqlclient"
		else
			MOD_MYSQL_DIR=/usr
			CPPFLAGS="$CPPFLAGS -I$MOD_MYSQL_DIR/include"
			LDFLAGS="$LDFLAGS -L$MOD_MYSQL_DIR/lib -lmysqlclient"
		fi
	else
		CPPFLAGS="$CPPFLAGS -I$MOD_MYSQL_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_MYSQL_DIR/lib -lmysqlclient"
	fi
	AC_CHECK_LIB([mysqlclient], [mysql_init], [], AC_MSG_ERROR(mySQL lib was not found))
	AC_CHECK_HEADER([mysql.h], [], AC_MSG_ERROR(mySQL header was not found))
	
	AC_LANG_PUSH(C++)
	AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[#include <mysql.h>]], [[my_bool rc = 1; mysql_options(0, MYSQL_OPT_RECONNECT, &rc);]]), [], [echo -n -e "#define MYSQL_NO_OPT_RECONNECT 1\n\n" >> include/libdodo/directives.runtime.h])
	AC_LANG_POP()
	
	echo -n -e "#define MYSQL_EXT 1\n\n" >> include/libdodo/directives.runtime.h

	if test "$DATABASE_W_XEXEC" = "no"
	then
		RESULT="$RESULT\ndata::base::mysql xexec support\t\t\t\t\tdisabled"
	else
		RESULT="$RESULT\ndata::base::mysql xexec support\t\t\t\t\tenabled"
	fi
	
	RESULT="$RESULT\nMySQL\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nMySQL\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([fast-cgi],
	AS_HELP_STRING([--with-fast-cgi@<:@=DIR@:>@], [use fast CGI]), [MOD_FASTCGI_DIR="$withval"], [MOD_FASTCGI="no"])
if test "$MOD_FASTCGI" != "no" -a "$MOD_FASTCGI_DIR" != "no"
then
	if test "$MOD_FASTCGI_DIR" = "yes"
	then
		MOD_FASTCGI_DIR=/usr
	fi
	CPPFLAGS="$CPPFLAGS -I$MOD_FASTCGI_DIR/include"
	LDFLAGS="$LDFLAGS -L$MOD_FASTCGI_DIR/lib -lfcgi"
	AC_CHECK_LIB([fcgi], [FCGX_Init], [], AC_MSG_ERROR(fast-cgi lib was not found))
	AC_CHECK_HEADER([fcgiapp.h], [], AC_MSG_ERROR(fast-cgi header was not found))
	echo -n -e "#define FASTCGI_EXT 1\n\n" >> include/libdodo/directives.runtime.h

	if test "$IO_W_XEXEC" = "no"
	then
		RESULT="$RESULT\ncgi::fast::exchange xexec support\t\t\t\tdisabled"
	else
		RESULT="$RESULT\ncgi::fast::exchange xexec support\t\t\t\tenabled"
	fi
	
	RESULT="$RESULT\nFastCGI\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nFastCGI\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([pcre],
	AS_HELP_STRING([--with-pcre@<:@=DIR@:>@], [use pcre]), [MOD_PCRE_DIR="$withval"], [MOD_PCRE="no"])
if test "$MOD_PCRE" != "no" -a "$MOD_PCRE_DIR" != "no"
then
	if test "$MOD_PCRE_DIR" = "yes"
	then
		CPPFLAGS="$CPPFLAGS $(pcre-config --cflags)"
		add_ldflags_libdir $(pcre-config --libs)
		LDFLAGS="$LDFLAGS -lpcre"
	else
		MOD_PCRE_DIR=/usr
		CPPFLAGS="$CPPFLAGS -I$MOD_PCRE_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_PCRE_DIR/lib -lpcre"
	fi
	AC_CHECK_LIB([pcre], [pcre_exec], [], AC_MSG_ERROR(pcre lib was not found))
	AC_CHECK_HEADER([pcre.h], [], AC_MSG_ERROR(pcre header was not found))
	echo -n -e "#define PCRE_EXT 1\n\n" >> include/libdodo/directives.runtime.h
	
	RESULT="$RESULT\nPCRE\t\t\t\t\t\t\t\tenabled"
else
	AC_CHECK_HEADER([regex.h], [], AC_MSG_ERROR(posix regex header was not found))
	RESULT="$RESULT\nPosix regex\t\t\t\t\t\t\tenabled"
fi

AC_ARG_ENABLE(dl,
	AS_HELP_STRING([--enable-dl], [enable dynamic loading]), [DL="$enableval"], [DL="no"])
if test "$DL" = "yes"
then
	echo -n -e "#define DL_EXT 1\n\n" >> include/libdodo/directives.runtime.h
	
	AC_ARG_ENABLE(fast-dynamic-loading,
		AS_HELP_STRING([--disable-fast-dynamic-loading], [do not unload library to produce better performance]), [DL_FAST="$enableval"], [DL_FAST="yes"])

	if test "$DL_FAST" = "yes" -a "$OS" = "Linux"
	then
		echo -n -e "#define DL_FAST 1\n\n" >> include/libdodo/directives.runtime.h        

		RESULT="$RESULT\nFast dynamic loading\t\t\t\t\t\tenabled"
	else
		RESULT="$RESULT\nFast dynamic loading\t\t\t\t\t\tdisabled"
	fi

	RESULT="$RESULT\nDynamic linking\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nDynamic linking\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([libxml2],
	AS_HELP_STRING([--with-libxml2@<:@=DIR@:>@], [use libxml2]), [MOD_LIBXML2_DIR="$withval"], [MOD_LIBXML2="no"])
if test "$MOD_LIBXML2" != "no" -a "$MOD_LIBXML2_DIR" != "no"
then
	if test "$MOD_LIBXML2_DIR" = "yes"
	then
		if test "$(xml2-config 2>/dev/null)" != ""
		then
			CPPFLAGS="$CPPFLAGS $(xml2-config --cflags)"
			add_ldflags_libdir $(xml2-config --libs)
			LDFLAGS="$LDFLAGS -lxml2"
		else
			MOD_LIBXML2_DIR=/usr
			CPPFLAGS="$CPPFLAGS -I$MOD_LIBXML2_DIR/include/libxml2"
			LDFLAGS="$LDFLAGS -L$MOD_LIBXML2_DIR/lib -lxml2"
		fi
	else
		CPPFLAGS="$CPPFLAGS -I$MOD_LIBXML2_DIR/include/libxml2"
		LDFLAGS="$LDFLAGS -L$MOD_LIBXML2_DIR/lib -lxml2"
	fi
	AC_CHECK_LIB([xml2], [xmlInitParser], [], AC_MSG_ERROR(libxml2 lib was not found))
	AC_CHECK_HEADER([libxml/xmlmemory.h], [], AC_MSG_ERROR(libxml2 header was not found))
	echo -n -e "#define LIBXML2_EXT 1\n\n" >> include/libdodo/directives.runtime.h
	
	RESULT="$RESULT\nlibxml2\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nlibxml2\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([threading-lib],
	AS_HELP_STRING([--with-threading-lib@<:@=lib@:>@], [specify threading library(supported: pthread), pthread by default]), [MOD_THREAD="$withval"], [MOD_THREAD="pthread"])
case "$MOD_THREAD" in
	pthread)
		AC_ARG_WITH([pthread-lib],
			AS_HELP_STRING([--with-pthread-lib@<:@=lib@:>@], [use pthread library(supported: pthread, thr, lthread, c_r), pthread by default]), [MOD_PTHREAD_LIB="$withval"], [MOD_PTHREAD_LIB="pthread"])
		AC_ARG_WITH([pthread-path],
			AS_HELP_STRING([--with-pthread-path@<:@=DIR@:>@], [path to pthread installation]), [MOD_PTHREAD_DIR="$withval"], [MOD_PTHREAD_DIR="/usr"])
		CPPFLAGS="$CPPFLAGS -I$MOD_PTHREAD_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_PTHREAD_DIR/lib -l$MOD_PTHREAD_LIB"
		AC_CHECK_LIB([$MOD_PTHREAD_LIB], [pthread_create], [], AC_MSG_ERROR($MOD_PTHREAD_LIB lib was not found))
		AC_CHECK_HEADER([pthread.h], [], AC_MSG_ERROR(pthread header was not found))
		echo -n -e "#define PTHREAD_EXT 1\n\n" >> include/libdodo/directives.runtime.h
		;;
	*)
		AC_MSG_ERROR(Unsuported threading library specified)
		;;
esac
RESULT="$RESULT\nthreading-library\t\t\t\t\t\t${MOD_THREAD}($MOD_PTHREAD_LIB)"

AC_ARG_WITH([bzip2],
	AS_HELP_STRING([--with-bzip2@<:@=DIR@:>@], [use bzip2]), [MOD_BZIP2_DIR="$withval"], [MOD_BZIP2="no"])
if test "$MOD_BZIP2" != "no" -a "$MOD_BZIP2_DIR" != "no"
then
	if test "$MOD_BZIP2_DIR" = "yes"
	then
		MOD_BZIP2_DIR=/usr
	fi
	CPPFLAGS="$CPPFLAGS -I$MOD_BZIP2_DIR/include"
	LDFLAGS="$LDFLAGS -L$MOD_BZIP2_DIR/lib -lbz2"
	AC_CHECK_LIB([bz2], [BZ2_bzBuffToBuffCompress], [], AC_MSG_ERROR(bz2 lib was not found))
	AC_CHECK_HEADER([bzlib.h], [], AC_MSG_ERROR(bz2 header was not found))
	echo -n -e "#define BZIP2_EXT 1\n\n" >> include/libdodo/directives.runtime.h
	
	RESULT="$RESULT\nBZIP2\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nBZIP2\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([zlib],
	AS_HELP_STRING([--with-zlib@<:@=DIR@:>@], [use zlib]), [MOD_ZLIB_DIR="$withval"], [MOD_ZLIB="no"])
if test "$MOD_ZLIB" != "no" -a "$MOD_ZLIB_DIR" != "no"
then
	if test "$MOD_ZLIB_DIR" = "yes"
	then
		MOD_ZLIB_DIR=/usr
	fi
	CPPFLAGS="$CPPFLAGS -I$MOD_ZLIB_DIR/include"
	LDFLAGS="$LDFLAGS -L$MOD_ZLIB_DIR/lib"
	AC_CHECK_HEADER([zlib.h])
	AC_ARG_ENABLE([zlib-lib],
		AS_HELP_STRING([--enable-zlib-lib], [enable zlib as lib]), [MOD_ZLIB_LIB="yes"], [MOD_ZLIB_LIB="no"])
	if test "$MOD_ZLIB_LIB" = "yes"
	then
		AC_CHECK_LIB([z], [deflateInit2], [], AC_MSG_ERROR(zlib lib was not found))
		LDFLAGS="$LDFLAGS -lz"
	fi
	echo -n -e "#define ZLIB_EXT 1\n\n" >> include/libdodo/directives.runtime.h
	
	RESULT="$RESULT\nZLIB\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nZLIB\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([iconv],
	AS_HELP_STRING([--with-iconv@<:@=DIR@:>@], [use iconv]), [MOD_ICONV_DIR="$withval"], [MOD_ICONV="no"])
if test "$MOD_ICONV" != "no" -a "$MOD_ICONV_DIR" != "no"
then
	if test "$MOD_ICONV_DIR" = "yes"
	then
		MOD_ICONV_DIR=/usr
	fi
	CPPFLAGS="$CPPFLAGS -I$MOD_ICONV_DIR/include"
	LDFLAGS="$LDFLAGS -L$MOD_ICONV_DIR/lib"
	AC_CHECK_HEADER([iconv.h])
	AC_ARG_ENABLE([iconv-lib],
		AS_HELP_STRING([--enable-iconv-lib], [enable iconv as lib]), [MOD_ICONV_LIB="yes"], [MOD_ICONV_LIB="no"])
		if test "$MOD_ICONV_LIB" = "yes"
	then
		AC_CHECK_LIB([iconv], [iconv], [], AC_MSG_ERROR(iconv lib was not found))
		LDFLAGS="$LDFLAGS -liconv"
	fi
	echo -n -e "#define ICONV_EXT 1\n\n" >> include/libdodo/directives.runtime.h
	
	RESULT="$RESULT\niconv\t\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\niconv\t\t\t\t\t\t\t\tdisabled"
fi

AC_ARG_WITH([imagemagick],
	AS_HELP_STRING([--with-imagemagick@<:@=DIR@:>@], [use ImageMagick]), [MOD_IMAGEMAGICK_DIR="$withval"], [MOD_IMAGEMAGICK="no"])
if test "$MOD_IMAGEMAGICK" != "no" -a "$MOD_IMAGEMAGICK_DIR" != "no"
then
	if test "$MOD_IMAGEMAGICK_DIR" = "yes"
	then
		if test "$(Magick-config 2>/dev/null)" != ""
		then
			CPPFLAGS="$CPPFLAGS $(Magick-config --cppflags)"
			add_ldflags_libdir $(Magick-config --ldflags)
			LDFLAGS="$LDFLAGS"
		else
			MOD_IMAGEMAGICK_DIR=/usr
			CPPFLAGS="$CPPFLAGS -I$MOD_IMAGEMAGICK_DIR/include -I$MOD_IMAGEMAGICK_DIR/include/ImageMagick"
			LDFLAGS="$LDFLAGS -L$MOD_IMAGEMAGICK_DIR/lib"
		fi
	else
		CPPFLAGS="$CPPFLAGS -I$MOD_IMAGEMAGICK_DIR/include"
		LDFLAGS="$LDFLAGS -L$MOD_IMAGEMAGICK_DIR/lib"
	fi

	AC_CHECK_LIB([MagickCore], [MagickCoreGenesis], [], OLD_IMAGEMAGICK_LIB="yes")
	if test "$OLD_IMAGEMAGICK_LIB" = "yes"
	then
		AC_CHECK_LIB([Magick], [MagickCoreGenesis], [], VERY_OLD_IMAGEMAGICK_LIB="yes")
		if test "$VERY_OLD_IMAGEMAGICK_LIB" == "yes"
		then
			AC_CHECK_LIB([Magick], [InitializeMagick], [], AC_MSG_ERROR(Magick lib was not found))

			echo -n -e "#define IMAGEMAGICK_PRE_63 1\n\n" >> include/libdodo/directives.runtime.h
		fi

		LDFLAGS="$LDFLAGS -lMagick"
	else
		LDFLAGS="$LDFLAGS -lMagickCore"
		
	fi
	if test "$VERY_OLD_IMAGEMAGICK_LIB" != "yes"
	then
		AC_CHECK_HEADER([magick/MagickCore.h], [], AC_MSG_ERROR(Magick header was not found))
	else
		AC_CHECK_HEADER([magick/magick.h], [], AC_MSG_ERROR(Magick header was not found))
	fi
	echo -n -e "#define IMAGEMAGICK_EXT 1\n\n" >> include/libdodo/directives.runtime.h

	AC_ARG_ENABLE(graphics-xexec,
		AS_HELP_STRING([--disable-graphics-xexec], [compile graphics w/o xexec support]), [GRAPHICS_W_XEXEC="$enableval"], [GRAPHICS_W_XEXEC="yes"])
	if test "$GRAPHICS_W_XEXEC" = "no"
	then
		echo -n -e "#define GRAPHICS_WO_XEXEC 1\n\n" >> include/libdodo/directives.runtime.h        
		
		RESULT="$RESULT\ngraphics xexec support\t\t\t\t\t\tdisabled"
	else
		RESULT="$RESULT\ngraphics xexec support\t\t\t\t\t\tenabled"
	fi
	
	RESULT="$RESULT\nImageMagick\t\t\t\t\t\t\tenabled"
else
	RESULT="$RESULT\nImageMagick\t\t\t\t\t\t\tdisabled"
fi

##
# filter LDFLAGS and CPPLAGS
##

NEW_LDFLAGS=
for i in $LDFLAGS
do
	case $i in
	-L*)
		SET_FLAG=0
		for j in $NEW_LDFLAGS
		do
			case $j in
				$i)
					SET_FLAG=1
					break;
					;;
			esac
		done
		if test $SET_FLAG -eq 0
		then
			NEW_LDFLAGS="$NEW_LDFLAGS $i"
		fi
		;;
	*)
		NEW_LDFLAGS="$NEW_LDFLAGS $i"
		;;
	esac
done
LDFLAGS=$NEW_LDFLAGS

NEW_CPPFLAGS=
for i in $CPPFLAGS
do
	case $i in
	-I*)
		SET_FLAG=0
		for j in $NEW_CPPFLAGS
		do
			case $j in
				$i)
					SET_FLAG=1
					break;
					;;
			esac
		done
		if test $SET_FLAG -eq 0
		then
			NEW_CPPFLAGS="$NEW_CPPFLAGS $i"
		fi
		;;
	*)
		NEW_CPPFLAGS="$NEW_CPPFLAGS $i"
		;;
	esac
done
CPPFLAGS=$NEW_CPPFLAGS

AC_HEADER_STDC

AC_CHECK_HEADERS([arpa/inet.h \
	fcntl.h \
	netdb.h \
	stdlib.h \
	string.h \
	unistd.h \
	utime.h \
	poll.h \
	ctype.h \
	errno.h \
	grp.h \
	libgen.h \
	math.h \
	net/if.h \
	netinet/in.h \
	pwd.h \
	semaphore.h \
	signal.h \
	stdarg.h \
	stdio.h \
	stdlib.h \
	syslog.h \
	sys/ioctl.h \
	sys/mman.h \
	sys/resource.h \
	sys/socket.h \
	sys/stat.h \
	sys/time.h \
	sys/types.h \
	sys/un.h \
	sys/wait.h \
	dirent.h \
	unistd.h \
	utime.h \
	time.h \
	netdb.h],
	[],
	[AC_MSG_ERROR(header was not found)])

AC_CHECK_HEADER([execinfo.h], [CALLSTACK_EX="yes"], [CALLSTACK_EX="no"])
if test "$CALLSTACK_EX" = "yes"
then
	AC_LANG_PUSH(C++)
	AC_CHECK_HEADER([cxxabi.h], [], AC_MSG_ERROR(cxxabi.h header was not found))
	AC_LANG_POP()

	echo -n -e "#define CALLSTACK_EX 1\n\n" >> include/libdodo/directives.runtime.h        
fi

if test "$CALLSTACK_EX" = "yes" -o "$DL" = "yes"
then
	AC_CHECK_HEADER([dlfcn.h], [], [AC_MSG_ERROR(dlfcn.h header was not found)])
	AC_ARG_ENABLE([dl-lib],
		AS_HELP_STRING([--disable-dl-lib], [disable dl as lib]), [MOD_DL_LIB="$enableval"], [MOD_DL_LIB="yes"])
	if test "$MOD_DL_LIB" = "yes"
	then
		AC_CHECK_LIB([dl], [dlopen], [], AC_MSG_ERROR(dl lib was not found))
		LDFLAGS="$LDFLAGS -ldl"
	fi
fi

echo -n -e "#endif\n" >> include/libdodo/directives.runtime.h        

##

AC_CONFIG_FILES([Makefile
				bin/dodo-config
				tests/Makefile
				tests/image_test/Makefile
				tests/cgifast_test/Makefile
				tests/cgi_test/Makefile
				tests/dbmysql_test/Makefile
				tests/dbpostgresql_test/Makefile
				tests/dbsqlite_test/Makefile
				tests/db_test/Makefile
				tests/iononblocked_ionetwork_test/Makefile
				tests/iononblocked_ionetworkssl_test/Makefile
				tests/iostdio_test/Makefile
				tests/iofile_toolsfilesystem_test/Makefile
				tests/iostring_test/Makefile
				tests/iopipe_iofilefifo_pcthreadcollection_test/Makefile
				tests/ionetwork_pcthreads_test/Makefile
				tests/ionetworkclient_test/Makefile
				tests/ionetworkserver_test/Makefile
				tests/ionetworksslserver_test/Makefile
				tests/ionetworksslclient_test/Makefile
				tests/ionetworkhttp_test/Makefile
				tests/pcthreadcollection_test/Makefile
				tests/pcprocesscollection_test/Makefile
				tests/pcjobcollection_test/Makefile
				tests/toolsnetwork_test/Makefile
				tests/toolsos_test/Makefile
				tests/toolstime_test/Makefile
				tests/toolsmisc_test/Makefile
				tests/toolscode_test/Makefile
				tests/toolslogger_test/Makefile
				tests/toolslibrary_test/Makefile
				tests/toolsregexp_test/Makefile
				tests/xexec_test/Makefile
				tests/rpcxmlhttpclient_test/Makefile
				tests/rpcxmlcgiserver_test/Makefile
				tests/rpcjsonhttpclient_test/Makefile
				tests/rpcjsoncgiserver_test/Makefile
				tests/dataformatjson_test/Makefile
				tests/dataformatxml_test/Makefile])

AC_OUTPUT

chmod +x bin/dodo-config

echo -e $RESULT

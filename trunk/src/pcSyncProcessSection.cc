/***************************************************************************
 *            pcSyncProcessSection.cc
 *
 *  Sat Oct 20 02:00:55 2007
 *  Copyright  2007  Ni@m
 *  niam.niam@gmail.com
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version 2.1 as published by
 *  the Free Software Foundation;
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/**
 * vim indentation settings
 * set tabstop=4
 * set shiftwidth=4
 */

#include <libdodo/pcSyncProcessSection.h>

using namespace dodo::pc::sync::process;

section::section(section &sec)
{

}

//-------------------------------------------------------------------

section::section(int a_key) : autogenerated(false),
							 acquired(false),
#ifdef XSI_IPC

							 keeper(-1)

#else

							 keeper(NULL)

#endif
{
#ifdef XSI_IPC

	if (a_key == 0)
	{
		key = tools::misc::iRandom();

		autogenerated = true;
	}
	else
		key = a_key;

	operations[0].sem_num = 0;
	operations[0].sem_flg = 0;

	keeper = semget(key, 1, S_IRUSR | S_IWUSR | IPC_CREAT);
	if (keeper == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_SECTION, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

	control.val = 0;

	if (semctl(keeper, 0, SETVAL, control) == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_SECTION, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#else

	key = '/';

	if (a_key == 0)
	{
		char _key[SH_KEY_SIZE / 2 - 1];
		tools::misc::random(_key, SH_KEY_SIZE / 2 - 1);

		key.append(tools::code::binToHex(dodoString(_key, SH_KEY_SIZE / 2 - 1)));

		autogenerated = true;
	}
	else
	{
		char _key[4];
		memcpy(_key, &a_key, 4);

		key.append(tools::code::binToHex(dodoString(_key, 4)));
	}

	keeper = sem_open(key.c_str(), O_CREAT, S_IRUSR | S_IWUSR, 1);
	if (keeper == NULL)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_SECTION, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#endif
}

//-------------------------------------------------------------------

section::section() : autogenerated(false),
							 acquired(false),
#ifdef XSI_IPC

							 keeper(-1)

#else

							 keeper(NULL)

#endif
{
}

//-------------------------------------------------------------------

section::~section()
{
#ifdef XSI_IPC

	if (keeper != -1)
	{
		if (autogenerated)
			semctl(keeper, 0, IPC_RMID);
		else
		{
			if (acquired)
			{
				operations[0].sem_op = -1;

				semop(keeper, operations, 1);
			}
		}
	}

#else

	if (keeper != NULL)
	{
		if (acquired)
			sem_post(keeper);

		sem_close(keeper);

		if (autogenerated)
			sem_unlink(key.c_str());
	}

#endif
}

//-------------------------------------------------------------------

void
section::close()
{
#ifdef XSI_IPC

	if (keeper != -1)
	{
		if (autogenerated)
			if (semctl(keeper, 0, IPC_RMID) == -1)
				throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_CLOSE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
		else
		{
			if (acquired)
			{
				operations[0].sem_op = -1;

				if (semop(keeper, operations, 1) == -1)
					throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_CLOSE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
			}
		}
	}

	keeper = -1;

#else

	if (keeper != NULL)
	{
		if (acquired)
			if (sem_post(keeper) == -1)
				throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_CLOSE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

		if (sem_close(keeper) == -1)
			throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_CLOSE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

		if (autogenerated)
			if (sem_unlink(key.c_str()) == -1)
				throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_CLOSE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);
	}

	keeper = NULL;

#endif
}

//-------------------------------------------------------------------

void
section::open(int a_key)
{
	close();

#ifdef XSI_IPC

	if (a_key == 0)
	{
		key = tools::misc::iRandom();

		autogenerated = true;
	}
	else
		key = a_key;

	operations[0].sem_num = 0;
	operations[0].sem_flg = 0;

	keeper = semget(key, 1, S_IRUSR | S_IWUSR | IPC_CREAT);
	if (keeper == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_OPEN, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

	control.val = 0;

	if (semctl(keeper, 0, SETVAL, control) == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_OPEN, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#else

	key = '/';

	if (a_key == 0)
	{
		char _key[SH_KEY_SIZE / 2 - 1];
		tools::misc::random(_key, SH_KEY_SIZE / 2 - 1);

		key.append(tools::code::binToHex(dodoString(_key, SH_KEY_SIZE / 2 - 1)));

		autogenerated = true;
	}
	else
	{
		char _key[4];
		memcpy(_key, &a_key, 4);

		key.append(tools::code::binToHex(dodoString(_key, 4)));
	}

	keeper = sem_open(key.c_str(), O_CREAT, S_IRUSR | S_IWUSR, 1);
	if (keeper == NULL)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_OPEN, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#endif
}

//-------------------------------------------------------------------

void
section::remove(int a_key)
{
#ifdef XSI_IPC

	int keeper = semget(a_key, 1, S_IRUSR | S_IWUSR);
	if (keeper == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_REMOVE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

	if (semctl(keeper, 0, IPC_RMID) == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_REMOVE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#else

	dodoString key = "/";

	char _key[4];
	memcpy(_key, &a_key, 4);

	key.append(tools::code::binToHex(dodoString(_key, 4)));

	if (sem_unlink(key.c_str()) == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_REMOVE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#endif
}

//-------------------------------------------------------------------

void
section::acquire()
{
#ifdef XSI_IPC

	if (keeper == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_ACQUIRE, exception::ERRNO_LIBDODO, SECTIONEX_NOTOPENED, PCSYNCPROCESSSECTIONEX_NOTOPENED_STR, __LINE__, __FILE__);

	operations[0].sem_op = 0;

	if(semop(keeper, operations, 1) != 0)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_ACQUIRE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

	operations[0].sem_op = 1;

	if(semop(keeper, operations, 1) != 0)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_ACQUIRE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#else

	if (keeper == NULL)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_ACQUIRE, exception::ERRNO_LIBDODO, SECTIONEX_NOTOPENED, PCSYNCPROCESSSECTIONEX_NOTOPENED_STR, __LINE__, __FILE__);

	if (sem_wait(keeper) != 0)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_ACQUIRE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#endif

	acquired = true;
}

//-------------------------------------------------------------------

void
section::release()
{
#ifdef XSI_IPC

	if (keeper == -1)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_RELEASE, exception::ERRNO_LIBDODO, SECTIONEX_NOTOPENED, PCSYNCPROCESSSECTIONEX_NOTOPENED_STR, __LINE__, __FILE__);

	operations[0].sem_op = -1;

	if(semop(keeper, operations, 1) != 0)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_RELEASE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#else

	if (keeper == NULL)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_RELEASE, exception::ERRNO_LIBDODO, SECTIONEX_NOTOPENED, PCSYNCPROCESSSECTIONEX_NOTOPENED_STR, __LINE__, __FILE__);

	if (sem_post(keeper) != 0)
		throw exception::basic(exception::ERRMODULE_PCSYNCPROCESSSECTION, SECTIONEX_RELEASE, exception::ERRNO_ERRNO, errno, strerror(errno), __LINE__, __FILE__);

#endif

	acquired = false;
}

//-------------------------------------------------------------------


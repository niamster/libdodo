/***************************************************************************
 *            pcSyncProcessLock.inline
 *
 *  Sat Mar 21 02:36:14 2009
 *  Copyright  2009  Ni@m
 *  niam.niam@gmail.com
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version 2.1 as published by
 *  the Free Software Foundation;
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/**
 * vim indentation settings
 * set tabstop=4
 * set shiftwidth=4
 */

#include <libdodo/directives.h>

#ifdef XSI_IPC
#include <sys/ipc.h>
#include <sys/sem.h>
#else /*POSIX_SEMAPHORES*/
#include <fcntl.h>
#include <semaphore.h>
#endif

#include <libdodo/types.h>

namespace dodo
{
	namespace pc
	{
		namespace sync
		{
			namespace process
			{
				/**
				 * @struct __lock__
				 * @brief defines system semaphore
				 */
				struct __lock__
				{
					/**
					 * constructor
					 */
					__lock__() :
#ifdef XSI_IPC
					keeper(-1)
#else
					keeper(NULL)
#endif
					{
					}

#ifdef XSI_IPC
					int keeper;             ///< semaphore
					int key;                ///< key for the semaphore
					union semun
					{
						int             val;
						struct semid_ds *buf;
						ushort          * array;
					} control;              ///< semaphore semaphore->control structure

					sembuf operations[1];   ///< semaphore semaphore->operations
#else
					sem_t *keeper;          ///< semaphore
					dodoString key;         ///< key for the semaphore
#endif
				};
			};
		};
	};
};

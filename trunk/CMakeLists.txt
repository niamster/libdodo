CMAKE_MINIMUM_REQUIRED(VERSION 2.4.8)
MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)
CMAKE_POLICY(SET CMP0005 NEW)

##
# project identity
##

PROJECT(libdodo)
SET(PROJECT_VERSION 0.11.0)
SET(PACKAGE_STRING "${PROJECT_NAME} ${PROJECT_VERSION}")

ADD_DEFINITIONS("-DPACKAGE_NAME=\"${PROJECT_NAME}\"")
ADD_DEFINITIONS("-DPACKAGE_VERSION=\"${PROJECT_VERSION}\"")
ADD_DEFINITIONS("-DPACKAGE_STRING=\"${PACKAGE_STRING}\"")

##
# default options
##

SET(CMAKE_INSTALL_PREFIX "/usr")

ENABLE_LANGUAGE(CXX)

##
# build options
##

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include")

AUX_SOURCE_DIRECTORY(src library_sources)

ADD_LIBRARY(dodo SHARED ${library_sources})

TARGET_LINK_LIBRARIES(dodo rt)

ADD_CUSTOM_TARGET(lib DEPENDS dodo)
SET_TARGET_PROPERTIES(dodo PROPERTIES 
		VERSION ${PROJECT_VERSION} 
		SOVERSION ${PROJECT_VERSION}
		CLEAN_DIRECT_OUTPUT 1)

##

ADD_DEFINITIONS("-D_REENTRANT -D_GNU_SOURCE -D__USE_UNIX98 -D_XOPEN_SOURCE=600 -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_THREAD_SAFE")

##
# checking dependencies/build options
##

FILE(WRITE "include/libdodo/directives.runtime.h"
"/***************************************************************************
*            directives.runtime.h
****************************************************************************/

#ifndef _DIRECTIVES_RUNTIME_H_
#define _DIRECTIVES_RUNTIME_H_

")

INCLUDE(CheckIncludeFiles)

OPTION(ENABLE_DEBUG "Enable debug info(ON/OFF)" OFF)
IF(ENABLE_DEBUG)
	ADD_DEFINITIONS("-g -DDEBUG")
ENDIF(ENABLE_DEBUG)

OPTION(ENABLE_PROFILING "Enable profiling(ON/OFF)" OFF)
IF(ENABLE_PROFILING)
	ADD_DEFINITIONS("-pg")
ENDIF(ENABLE_PROFILING)

OPTION(ENABLE_LIBWRAP "Enable libwrap(ON/OFF)" ON)
IF(ENABLE_LIBWRAP)
	TARGET_LINK_LIBRARIES(dodo wrap)
ENDIF(ENABLE_LIBWRAP)

OPTION(ENABLE_DEQUE "Enable deque, use std::deque instead of std::vector(ON/OFF)" ON)
IF(ENABLE_DEQUE)
	FILE(APPEND "include/libdodo/directives.runtime.h" "#define USE_DEQUE\n\n")
ENDIF(ENABLE_DEQUE)

OPTION(ENABLE_IO_EXEC "compile io:: with xexec support(ON/OFF)" ON)
IF(NOT ENABLE_IO_EXEC)
	FILE(APPEND "include/libdodo/directives.runtime.h" "#define IO_WO_XEXEC\n\n")
ENDIF(NOT ENABLE_IO_EXEC)

OPTION(ENABLE_DB_EXEC "compile db:: with xexec support(ON/OFF)" ON)
IF(NOT ENABLE_DB_EXEC)
	FILE(APPEND "include/libdodo/directives.runtime.h" "#define DATABASE_WO_XEXEC\n\n")
ENDIF(NOT ENABLE_DB_EXEC)


SET(SQLITE_PATH "/usr")
OPTION(WITH_SQLITE "use sqlite3(ON/OFF)" OFF)
IF(WITH_SQLITE)
	FIND_PATH(SQLITE_INCLUDE_DIR "sqlite3.h" "${SQLITE_PATH}/include")
	FIND_LIBRARY(SQLITE_LIB_DIR "sqlite3" PATHS "${SQLITE_PATH}/lib")

	IF(SQLITE_INCLUDE_DIR AND SQLITE_LIB_DIR)
		MESSAGE(STATUS "sqlite3 has been successfully found")
		INCLUDE_DIRECTORIES("${SQLITE_PATH}/include")
		LINK_DIRECTORIES("${SQLITE_PATH}/lib")
		TARGET_LINK_LIBRARIES(dodo sqlite3)
		FILE(APPEND "include/libdodo/directives.runtime.h" "#define SQLITE_EXT\n\n")
	ELSE(SQLITE_INCLUDE_DIR AND SQLITE_LIB_DIR)
		MESSAGE(FATAL_ERROR "Unable to find sqlite3")
	ENDIF(SQLITE_INCLUDE_DIR AND SQLITE_LIB_DIR)
ENDIF(WITH_SQLITE)


CHECK_INCLUDE_FILES("arpa/inet.h" HAVE_ARPA_INET_H)
IF(HAVE_ARPA_INET_H)
	ADD_DEFINITIONS("-DHAVE_ARPA_INET_H")
ENDIF(HAVE_ARPA_INET_H)

CHECK_INCLUDE_FILES("fcntl.h" HAVE_FCNTL_H)
IF(HAVE_FCNTL_H)
	ADD_DEFINITIONS("-DHAVE_FCNTL_H")
ENDIF(HAVE_FCNTL_H)

CHECK_INCLUDE_FILES("netdb.h" HAVE_NETDB_H)
IF(HAVE_NETDB_H)
	ADD_DEFINITIONS("-DHAVE_NETDB_H")
ENDIF(HAVE_NETDB_H)

CHECK_INCLUDE_FILES("stdlib.h" HAVE_STDLIB_H)
IF(HAVE_STDLIB_H)
	ADD_DEFINITIONS("-DHAVE_STDLIB_H")
ENDIF(HAVE_STDLIB_H)

CHECK_INCLUDE_FILES("string.h" HAVE_STRING_H)
IF(HAVE_STRING_H)
	ADD_DEFINITIONS("-DHAVE_STRING_H")
ENDIF(HAVE_STRING_H)

CHECK_INCLUDE_FILES("unistd.h" HAVE_UNISTD_H)
IF(HAVE_UNISTD_H)
	ADD_DEFINITIONS("-DHAVE_UNISTD_H")
ENDIF(HAVE_UNISTD_H)

CHECK_INCLUDE_FILES("utime.h" HAVE_UTIME_H)
IF(HAVE_UTIME_H)
	ADD_DEFINITIONS("-DHAVE_UTIME_H")
ENDIF(HAVE_UTIME_H)

CHECK_INCLUDE_FILES("poll.h" HAVE_POLL_H)
IF(HAVE_POLL_H)
	ADD_DEFINITIONS("-DHAVE_POLL_H")
ENDIF(HAVE_POLL_H)

CHECK_INCLUDE_FILES("ctype.h" HAVE_CTYPE_H)
IF(HAVE_CTYPE_H)
	ADD_DEFINITIONS("-DHAVE_CTYPE_H")
ENDIF(HAVE_CTYPE_H)

CHECK_INCLUDE_FILES("errno.h" HAVE_ERRNO_H)
IF(HAVE_ERRNO_H)
	ADD_DEFINITIONS("-DHAVE_ERRNO_H")
ENDIF(HAVE_ERRNO_H)

CHECK_INCLUDE_FILES("grp.h" HAVE_GRP_H)
IF(HAVE_GRP_H)
	ADD_DEFINITIONS("-DHAVE_GRP_H")
ENDIF(HAVE_GRP_H)

CHECK_INCLUDE_FILES("libgen.h" HAVE_LIBGEN_H)
IF(HAVE_LIBGEN_H)
	ADD_DEFINITIONS("-DHAVE_LIBGEN_H")
ENDIF(HAVE_LIBGEN_H)

CHECK_INCLUDE_FILES("math.h" HAVE_MATH_H)
IF(HAVE_MATH_H)
	ADD_DEFINITIONS("-DHAVE_MATH_H")
ENDIF(HAVE_MATH_H)

CHECK_INCLUDE_FILES("net/if.h" HAVE_NET_IF_H)
IF(HAVE_NET_IF_H)
	ADD_DEFINITIONS("-DHAVE_NET_IF_H")
ENDIF(HAVE_NET_IF_H)

CHECK_INCLUDE_FILES("netinet/in.h" HAVE_NETINET_IN_H)
IF(HAVE_NETINET_IN_H)
	ADD_DEFINITIONS("-DHAVE_NETINET_IN_H")
ENDIF(HAVE_NETINET_IN_H)

CHECK_INCLUDE_FILES("pwd.h" HAVE_PWD_H)
IF(HAVE_PWD_H)
	ADD_DEFINITIONS("-DHAVE_PWD_H")
ENDIF(HAVE_PWD_H)

CHECK_INCLUDE_FILES("semaphore.h" HAVE_SEMAPHORE_H)
IF(HAVE_SEMAPHORE_H)
	ADD_DEFINITIONS("-DHAVE_SEMAPHORE_H")
ENDIF(HAVE_SEMAPHORE_H)

CHECK_INCLUDE_FILES("signal.h" HAVE_SIGNAL_H)
IF(HAVE_SIGNAL_H)
	ADD_DEFINITIONS("-DHAVE_SIGNAL_H")
ENDIF(HAVE_SIGNAL_H)

CHECK_INCLUDE_FILES("stdarg.h" HAVE_STDARG_H)
IF(HAVE_STDARG_H)
	ADD_DEFINITIONS("-DHAVE_STDARG_H")
ENDIF(HAVE_STDARG_H)

CHECK_INCLUDE_FILES("stdio.h" HAVE_STDIO_H)
IF(HAVE_STDIO_H)
	ADD_DEFINITIONS("-DHAVE_STDIO_H")
ENDIF(HAVE_STDIO_H)

CHECK_INCLUDE_FILES("stdlib.h" HAVE_STDLIB_H)
IF(HAVE_STDLIB_H)
	ADD_DEFINITIONS("-DHAVE_STDLIB_H")
ENDIF(HAVE_STDLIB_H)

CHECK_INCLUDE_FILES("syslog.h" HAVE_SYSLOG_H)
IF(HAVE_SYSLOG_H)
	ADD_DEFINITIONS("-DHAVE_SYSLOG_H")
ENDIF(HAVE_SYSLOG_H)

CHECK_INCLUDE_FILES("sys/ioctl.h" HAVE_SYS_IOCTL_H)
IF(HAVE_SYS_IOCTL_H)
	ADD_DEFINITIONS("-DHAVE_SYS_IOCTL_H")
ENDIF(HAVE_SYS_IOCTL_H)

CHECK_INCLUDE_FILES("symman.h" HAVE_SYMMAN_H)
IF(HAVE_SYMMAN_H)
	ADD_DEFINITIONS("-DHAVE_SYMMAN_H")
ENDIF(HAVE_SYMMAN_H)

CHECK_INCLUDE_FILES("sys/resource.h" HAVE_SYS_RESOURCE_H)
IF(HAVE_SYS_RESOURCE_H)
	ADD_DEFINITIONS("-DHAVE_SYS_RESOURCE_H")
ENDIF(HAVE_SYS_RESOURCE_H)

CHECK_INCLUDE_FILES("sys/socket.h" HAVE_SYS_SOCKET_H)
IF(HAVE_SYS_SOCKET_H)
	ADD_DEFINITIONS("-DHAVE_SYS_SOCKET_H")
ENDIF(HAVE_SYS_SOCKET_H)

CHECK_INCLUDE_FILES("sys/stat" HAVE_SYS_STAT)
IF(HAVE_SYS_STAT)
	ADD_DEFINITIONS("-DHAVE_SYS_STAT")
ENDIF(HAVE_SYS_STAT)

CHECK_INCLUDE_FILES("sys/time.h" HAVE_SYS_TIME_H)
IF(HAVE_SYS_TIME_H)
	ADD_DEFINITIONS("-DHAVE_SYS_TIME_H")
ENDIF(HAVE_SYS_TIME_H)

CHECK_INCLUDE_FILES("sys/types.h" HAVE_SYS_TYPES_H)
IF(HAVE_SYS_TYPES_H)
	ADD_DEFINITIONS("-DHAVE_SYS_TYPES_H")
ENDIF(HAVE_SYS_TYPES_H)

CHECK_INCLUDE_FILES("sys/un.h" HAVE_SYS_UN_H)
IF(HAVE_SYS_UN_H)
	ADD_DEFINITIONS("-DHAVE_SYS_UN_H")
ENDIF(HAVE_SYS_UN_H)

CHECK_INCLUDE_FILES("sys/wait" HAVE_SYS_WAIT)
IF(HAVE_SYS_WAIT)
	ADD_DEFINITIONS("-DHAVE_SYS_WAIT")
ENDIF(HAVE_SYS_WAIT)

CHECK_INCLUDE_FILES("dirent.h" HAVE_DIRENT_H)
IF(HAVE_DIRENT_H)
	ADD_DEFINITIONS("-DHAVE_DIRENT_H")
ENDIF(HAVE_DIRENT_H)

CHECK_INCLUDE_FILES("unistd.h" HAVE_UNISTD_H)
IF(HAVE_UNISTD_H)
	ADD_DEFINITIONS("-DHAVE_UNISTD_H")
ENDIF(HAVE_UNISTD_H)

CHECK_INCLUDE_FILES("utime.h" HAVE_UTIME_H)
IF(HAVE_UTIME_H)
	ADD_DEFINITIONS("-DHAVE_UTIME_H")
ENDIF(HAVE_UTIME_H)

CHECK_INCLUDE_FILES("time.h" HAVE_TIME_H)
IF(HAVE_TIME_H)
	ADD_DEFINITIONS("-DHAVE_TIME_H")
ENDIF(HAVE_TIME_H)

CHECK_INCLUDE_FILES("netdb.h" HAVE_NETDB_H)
IF(HAVE_NETDB_H)
	ADD_DEFINITIONS("-DHAVE_NETDB_H")
ENDIF(HAVE_NETDB_H)

FILE(APPEND "include/libdodo/directives.runtime.h" "#endif\n")

SET(prefix ${CMAKE_INSTALL_PREFIX})
SET(exec_prefix "${prefix}/bin")
SET(includedir "${prefix}/include")
SET(libdir "${prefix}/lib")
CONFIGURE_FILE("bin/dodo-config.in" "bin/dodo-config" @ONLY)
EXECUTE_PROCESS(COMMAND "chmod" "+x" "bin/dodo-config")

##
# install options
##

INSTALL(FILES "${PROJECT_SOURCE_DIR}/include/libdodo/*" DESTINATION include/libdodo)


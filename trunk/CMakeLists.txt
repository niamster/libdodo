CMAKE_MINIMUM_REQUIRED(VERSION 2.4.8)
MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)
CMAKE_POLICY(SET CMP0005 NEW)

##
# project identity
##

PROJECT(libdodo)
SET(PROJECT_VERSION 0.11.0)
SET(PACKAGE_STRING "${PROJECT_NAME} ${PROJECT_VERSION}")

ADD_DEFINITIONS("-DPACKAGE_NAME=\"${PROJECT_NAME}\"")
ADD_DEFINITIONS("-DPACKAGE_VERSION=\"${PROJECT_VERSION}\"")
ADD_DEFINITIONS("-DPACKAGE_STRING=\"${PACKAGE_STRING}\"")

##
# default options
##

SET(LIBDODO_INSTALL_PREFIX "/usr" CACHE PATH "Prefix prepended to install directories")
SET(CMAKE_INSTALL_PREFIX "${LIBDODO_INSTALL_PREFIX}" CACHE PATH "Prefix prepended to install directories" FORCE)

##
# build options help
##
OPTION(HELP "Enable profiling(ON/OFF)" OFF)
IF(HELP)
	SET(HELP OFF CACHE BOOL "Display build options" FORCE)
	MESSAGE(STATUS "
	CMake configures ${PACKAGE_STRING} to adapt to many kinds of systems.

	Usage: cmake [OPTION]... [VAR=VALUE]...
	Configuration:
		-DHELP=ON				display this help and exit
	
	Installation directories:
		-DLIBDODO_INSTALL_PREFIX=PREFIX		install architecture-independent 
							files in PREFIX[${LIBDODO_INSTALL_PREFIX}]
	
	By default, `make install' will install all the files in
	`${LIBDODO_INSTALL_PREFIX}/bin', `${LIBDODO_INSTALL_PREFIX}/lib' etc.
	You can specify	an installation prefix other than `${LIBDODO_INSTALL_PREFIX}' 
	using `-DLIBDODO_INSTALL_PREFIX', for instance `-DLIBDODO_INSTALL_PREFIX:PATH=$HOME'.

	Optional Features:
		-DFEATURE=OFF				do not include FEATURE
		-DFEATURE=ON				include FEATURE

		-DDEBUG=[ON|OFF]			Enable debug info, OFF by default
		-DPROFILING=[ON|OFF]			Enable profiling, OFF by default
		-DLIBWRAP=[ON|OFF]			Enable libwrap, ON by default
		-DDEQUE=[ON|OFF]			Use std::deque instead of std::vector, ON by default
		-DIO_EXEC=[ON|OFF]			Compile io:: with xexec support, ON by default
		-DDB_EXEC=[ON|OFF]			Compile db:: with xexec support, ON by default

	
	Optional Packages:
		-DSQLITE_PATH:PATH=[DIR]		path to sqlite installation
		-DWITH_SQLITE=[ON|OFF]			use sqlite

		-DOPENSSL_PATH:PATH=[DIR]		path to openssl installation
		-DWITH_OPENSSL=[ON|OFF]			use openssl

		-DBFD_PATH:PATH=[DIR]			path to bfd installation
		-DWITH_BFD=[ON|OFF]			use bfd

		-DPOSTGRESQL_PATH:PATH=[DIR]		path to postgresql installation
		-DWITH_POSTGRESQL=[ON|OFF]		use postgresql

		-DMYSQL_PATH:PATH=[DIR]			path to mysql installation
		-DWITH_MYSQL=[ON|OFF]			use mysql

		-DFASTCGI_PATH:PATH=[DIR]		path to fast-cgi installation
		-DWITH_FASTCGI=[ON|OFF]			use fast-cgi

		-DPCRE_PATH:PATH=[DIR]			path to pcre installation
		-DWITH_PCRE=[ON|OFF]			use pcre
		
	")
	RETURN()
ENDIF(HELP)

##
#
##

ENABLE_LANGUAGE(CXX)

##
# functions
##

MACRO(GET_LIB_DIRS FLAGS LIB_DIRS)
	SET(${LIB_DIRS})
	FOREACH(FLAG ${FLAGS})
		STRING(REGEX MATCHALL "-L([^ ]*)" MATCH_FLAG ${FLAG})
		FOREACH(CFLAG ${MATCH_FLAG})
			STRING(REPLACE "-L" "" DIR ${MATCH_FLAG})
			SET(${LIB_DIRS} ${${LIB_DIRS}} ${DIR})
		ENDFOREACH(CFLAG)
	ENDFOREACH(FLAG)
ENDMACRO(GET_LIB_DIRS)

MACRO(GET_INCLUDE_DIRS FLAGS INCLUDE_DIRS)
	SET(${INCLUDE_DIRS})
	FOREACH(FLAG ${FLAGS})
		STRING(REGEX MATCHALL "-I([^ ]*)" MATCH_FLAG ${FLAG})
		FOREACH(CFLAG ${MATCH_FLAG})
			STRING(REPLACE "-I" "" DIR ${MATCH_FLAG})
			SET(${INCLUDE_DIRS} ${${INCLUDE_DIRS}} ${DIR})
		ENDFOREACH(CFLAG)
	ENDFOREACH(FLAG)
ENDMACRO(GET_INCLUDE_DIRS)

FUNCTION(ADD_LINK_DIRECTORIES DIRS)
	FOREACH(DIR ${DIRS})
		LINK_DIRECTORIES("${DIR}")
	ENDFOREACH(DIR)
ENDFUNCTION(ADD_LINK_DIRECTORIES)

FUNCTION(ADD_INCLUDE_DIRECTORIES DIRS)
	FOREACH(DIR ${DIRS})
		INCLUDE_DIRECTORIES("${DIR}")
	ENDFOREACH(DIR)
ENDFUNCTION(ADD_INCLUDE_DIRECTORIES)

##
# build options
##

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include")

AUX_SOURCE_DIRECTORY(src library_sources)

ADD_LIBRARY(dodo SHARED ${library_sources})

TARGET_LINK_LIBRARIES(dodo rt)

ADD_CUSTOM_TARGET(lib DEPENDS dodo)
SET_TARGET_PROPERTIES(dodo PROPERTIES 
		VERSION ${PROJECT_VERSION} 
		SOVERSION ${PROJECT_VERSION}
		CLEAN_DIRECT_OUTPUT 1)

##

ADD_DEFINITIONS("-D_REENTRANT -D_GNU_SOURCE -D__USE_UNIX98 -D_XOPEN_SOURCE=600 -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_THREAD_SAFE")

##
# checking dependencies/build options
##

FILE(WRITE "include/libdodo/directives.runtime.h"
"/***************************************************************************
*            directives.runtime.h
****************************************************************************/

#ifndef _DIRECTIVES_RUNTIME_H_
#define _DIRECTIVES_RUNTIME_H_

")

INCLUDE(CheckIncludeFiles)
INCLUDE(CheckCXXSourceCompiles)
INCLUDE(CheckLibraryExists)

OPTION(ENABLE_DEBUG "Enable debug info(ON/OFF)" OFF)
IF(ENABLE_DEBUG)
	ADD_DEFINITIONS("-g -DDEBUG")
ENDIF(ENABLE_DEBUG)

OPTION(ENABLE_PROFILING "Enable profiling(ON/OFF)" OFF)
IF(ENABLE_PROFILING)
	ADD_DEFINITIONS("-pg")
ENDIF(ENABLE_PROFILING)

OPTION(ENABLE_LIBWRAP "Enable libwrap(ON/OFF)" ON)
IF(ENABLE_LIBWRAP)
	TARGET_LINK_LIBRARIES(dodo wrap)
ENDIF(ENABLE_LIBWRAP)

OPTION(ENABLE_DEQUE "Use std::deque instead of std::vector(ON/OFF)" ON)
IF(ENABLE_DEQUE)
	FILE(APPEND "include/libdodo/directives.runtime.h" "#define USE_DEQUE\n\n")
ENDIF(ENABLE_DEQUE)

OPTION(ENABLE_IO_EXEC "Compile io:: with xexec support(ON/OFF)" ON)
IF(NOT ENABLE_IO_EXEC)
	FILE(APPEND "include/libdodo/directives.runtime.h" "#define IO_WO_XEXEC\n\n")
ENDIF(NOT ENABLE_IO_EXEC)

OPTION(ENABLE_DB_EXEC "Compile db:: with xexec support(ON/OFF)" ON)
IF(NOT ENABLE_DB_EXEC)
	FILE(APPEND "include/libdodo/directives.runtime.h" "#define DATABASE_WO_XEXEC\n\n")
ENDIF(NOT ENABLE_DB_EXEC)


SET(SQLITE_PATH "/usr")
OPTION(WITH_SQLITE "use sqlite3(ON/OFF)" OFF)
IF(WITH_SQLITE)
	FIND_PATH(SQLITE_INCLUDE_DIR "sqlite3.h" "${SQLITE_PATH}/include" "${SQLITE_PATH}/local/include")
	CHECK_LIBRARY_EXISTS("sqlite3" "sqlite3_exec" "-L${SQLITE_PATH}/lib" SQLITE_LIB)

	IF(SQLITE_INCLUDE_DIR AND SQLITE_LIB)
		MESSAGE(STATUS "sqlite3 has been successfully found")

		INCLUDE_DIRECTORIES(${SQLITE_INCLUDE_DIR})
		LINK_DIRECTORIES("${SQLITE_PATH}/lib")

		TARGET_LINK_LIBRARIES(dodo sqlite3)

		FILE(APPEND "include/libdodo/directives.runtime.h" "#define SQLITE_EXT\n\n")
	ELSE(SQLITE_INCLUDE_DIR AND SQLITE_LIB)
		MESSAGE(FATAL_ERROR "Unable to find sqlite3")
	ENDIF(SQLITE_INCLUDE_DIR AND SQLITE_LIB)
ENDIF(WITH_SQLITE)

SET(OPENSSL_PATH "/usr")
OPTION(WITH_OPENSSL "use openssl(ON/OFF)" OFF)
IF(WITH_OPENSSL)
	FIND_PATH(OPENSSL_INCLUDE_DIR "openssl/ssl.h" "${OPENSSL_PATH}/include" "${OPENSSL_PATH}/local/include")
	CHECK_LIBRARY_EXISTS("ssl" "SSL_library_init" "-L${OPENSSL_PATH}/lib" OPENSSL_LIB)

	IF(OPENSSL_INCLUDE_DIR AND OPENSSL_LIB)
		MESSAGE(STATUS "openssl has been successfully found")

		INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
		LINK_DIRECTORIES("${OPENSSL_PATH}/lib")

		TARGET_LINK_LIBRARIES(dodo ssl)

		FILE(APPEND "include/libdodo/directives.runtime.h" "#define OPENSSL_EXT\n\n")
	ELSE(OPENSSL_INCLUDE_DIR AND OPENSSL_LIB)
		MESSAGE(FATAL_ERROR "Unable to find openssl")
	ENDIF(OPENSSL_INCLUDE_DIR AND OPENSSL_LIB)
ENDIF(WITH_OPENSSL)

SET(BFD_PATH "/usr")
OPTION(WITH_BFD "use bfd(ON/OFF)" OFF)
IF(WITH_BFD)
	FIND_PATH(BFD_INCLUDE_DIR "bfd.h" "${BFD_PATH}/include" "${BFD_PATH}/local/include")
	CHECK_LIBRARY_EXISTS("bfd" "bfd_fopen" "-L${BFD_PATH}/lib" BFD_LIB)

	IF(BFD_INCLUDE_DIR AND BFD_LIB)
		MESSAGE(STATUS "bfd has been successfully found")

		INCLUDE_DIRECTORIES(${BFD_INCLUDE_DIR})
		LINK_DIRECTORIES("${BFD_PATH}/lib")

		TARGET_LINK_LIBRARIES(dodo bfd)

		FILE(APPEND "include/libdodo/directives.runtime.h" "#define BFD_EXT\n\n")
	ELSE(BFD_INCLUDE_DIR AND BFD_LIB)
		MESSAGE(FATAL_ERROR "Unable to find bfd")
	ENDIF(BFD_INCLUDE_DIR AND BFD_LIB)
ENDIF(WITH_BFD)

SET(POSTGRESQL_PATH "/usr")
OPTION(WITH_POSTGRESQL "use postgresql(ON/OFF)" OFF)
IF(WITH_POSTGRESQL)
	FIND_PROGRAM(PG_CONFIG "pg_config" "/usr/bin" "/usr/local/bin")
	IF(PG_CONFIG)
		EXECUTE_PROCESS(COMMAND "pg_config" "--includedir" OUTPUT_VARIABLE POSTGRESQL_INCLUDE_PATH OUTPUT_STRIP_TRAILING_WHITESPACE)
		EXECUTE_PROCESS(COMMAND "pg_config" "--libdir" OUTPUT_VARIABLE POSTGRESQL_LIB_PATH OUTPUT_STRIP_TRAILING_WHITESPACE)
	ELSE(PG_CONFIG)
		SET(POSTGRESQL_INCLUDE_PATH "${POSTGRESQL_PATH}/include" "${POSTGRESQL_PATH}/include/postgresql" "${POSTGRESQL_PATH}/local/include" "${POSTGRESQL_PATH}/local/include/postgresql")
		SET(POSTGRESQL_LIB_PATH "${POSTGRESQL_PATH}/lib")
	ENDIF(PG_CONFIG)

	FIND_PATH(POSTGRESQL_INCLUDE_DIR "libpq-fe.h" ${POSTGRESQL_INCLUDE_PATH})
	CHECK_LIBRARY_EXISTS("pq" "PQclear" "-L${POSTGRESQL_LIB_PATH}" POSTGRESQL_LIB)

	IF(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIB)
		MESSAGE(STATUS "postresql has been successfully found")

		INCLUDE_DIRECTORIES(${POSTGRESQL_INCLUDE_DIR})
		LINK_DIRECTORIES(${POSTGRESQL_LIB_PATH})

		TARGET_LINK_LIBRARIES(dodo pq)

		FILE(APPEND "include/libdodo/directives.runtime.h" "#define POSTGRESQL_EXT\n\n")

		SET(CMAKE_REQUIRED_INCLUDES "${POSTGRESQL_INCLUDE_DIR}")
		SET(CMAKE_REQUIRED_LIBRARIES "pq")
		CHECK_CXX_SOURCE_COMPILES(
"
#include <libpq-fe.h>
int main(int argc, char **argv)
{
	pg_encoding_to_char(0);

	return 0;
}
"
		POSTGRESQL_HAVE_ENCODINGTOCHAR)
		SET(CMAKE_REQUIRED_INCLUDES)
		SET(CMAKE_REQUIRED_LIBRARIES)
		IF(NOT POSTGRESQL_HAVE_ENCODINGTOCHAR)
			FILE(APPEND "include/libdodo/directives.runtime.h" "#define POSTGRESQL_NO_ENCODINGTOCHAR\n\n")
		ENDIF(NOT POSTGRESQL_HAVE_ENCODINGTOCHAR)
	ELSE(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIB)
		MESSAGE(FATAL_ERROR "Unable to find postgresql")
	ENDIF(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIB)
ENDIF(WITH_POSTGRESQL)

SET(MYSQL_PATH "/usr")
OPTION(WITH_MYSQL "use mysql(ON/OFF)" OFF)
IF(WITH_MYSQL)
	FIND_PROGRAM(MYSQL_CONFIG "pg_config" "/usr/bin" "/usr/local/bin")
	IF(MYSQL_CONFIG)
		EXECUTE_PROCESS(COMMAND "mysql_config" "--cflags" OUTPUT_VARIABLE MYSQL_CFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
		EXECUTE_PROCESS(COMMAND "mysql_config" "--libs" OUTPUT_VARIABLE	MYSQL_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE)
		GET_INCLUDE_DIRS(${MYSQL_CFLAGS} MYSQL_INCLUDE_PATH)
		GET_LIB_DIRS(${MYSQL_LIBS} MYSQL_LIB_PATH)
	ELSE(MYSQL_CONFIG)
		SET(MYSQL_INCLUDE_PATH "${MYSQL_PATH}/include" "${MYSQL_PATH}/include/mysql" "${MYSQL_PATH}/local/include" "${MYSQL_PATH}/local/include/mysql")
		SET(MYSQL_LIB_PATH "${MYSQL_PATH}/lib")
	ENDIF(MYSQL_CONFIG)

	FIND_PATH(MYSQL_INCLUDE_DIR "mysql.h" ${MYSQL_INCLUDE_PATH})
	FOREACH(FLAG ${MYSQL_LIB_PATH})
		SET(MYSLQ_LDFLAGS "${MYSQL_LDGLAGS} -L${FLAG}")
	ENDFOREACH(FLAG)
	CHECK_LIBRARY_EXISTS("mysqlclient" "mysql_init" "${MYSQL_LDGLAGS}" MYSQL_LIB)

	IF(MYSQL_INCLUDE_DIR AND MYSQL_LIB)
		MESSAGE(STATUS "mysql has been successfully found")

		ADD_LINK_DIRECTORIES(${MYSQL_LIB_PATH})
		ADD_INCLUDE_DIRECTORIES(${MYSQL_INCLUDE_PATH})

		TARGET_LINK_LIBRARIES(dodo mysqlclient)

		FILE(APPEND "include/libdodo/directives.runtime.h" "#define MYSQL_EXT\n\n")

		SET(CMAKE_REQUIRED_INCLUDES ${MYSQL_INCLUDE_PATH})
		SET(CMAKE_REQUIRED_LIBRARIES "mysqlclient")
		CHECK_CXX_SOURCE_COMPILES(
"
#include <mysql.h>
int main(int argc, char **argv)
{
	my_bool rc = 1;
	mysql_options(0, MYSQL_OPT_RECONNECT, &rc);

	return 0;
}
"
		MYSQL_HAVE_OPT_RECONNECT)
		SET(CMAKE_REQUIRED_INCLUDES)
		SET(CMAKE_REQUIRED_LIBRARIES)
		IF(NOT MYSQL_HAVE_OPT_RECONNECT)
			FILE(APPEND "include/libdodo/directives.runtime.h" "#define MYSQL_NO_OPT_RECONNECT\n\n")
		ENDIF(NOT MYSQL_HAVE_OPT_RECONNECT)
	ELSE(MYSQL_INCLUDE_DIR AND MYSQL_LIB)
		MESSAGE(FATAL_ERROR "Unable to find mysql")
	ENDIF(MYSQL_INCLUDE_DIR AND MYSQL_LIB)
ENDIF(WITH_MYSQL)

SET(FASTCGI_PATH "/usr")
OPTION(WITH_FASTCGI "use fast-cgi(ON/OFF)" OFF)
IF(WITH_FASTCGI)
	FIND_PATH(FASTCGI_INCLUDE_DIR "fcgiapp.h" "${FASTCGI_PATH}/include" "${FASTCGI_PATH}/local/include")
	CHECK_LIBRARY_EXISTS("fcgi" "FCGX_Init" "-L${FASTCGI_PATH}/lib" FASTCGI_LIB)

	IF(FASTCGI_INCLUDE_DIR AND FASTCGI_LIB)
		MESSAGE(STATUS "fast-cgi has been successfully found")

		INCLUDE_DIRECTORIES(${FASTCGI_INCLUDE_DIR})
		LINK_DIRECTORIES("${FASTCGI_PATH}/lib")

		TARGET_LINK_LIBRARIES(dodo fcgi)

		FILE(APPEND "include/libdodo/directives.runtime.h" "#define FASTCGI_EXT\n\n")
	ELSE(FASTCGI_INCLUDE_DIR AND FASTCGI_LIB)
		MESSAGE(FATAL_ERROR "Unable to find fast-cgi")
	ENDIF(FASTCGI_INCLUDE_DIR AND FASTCGI_LIB)
ENDIF(WITH_FASTCGI)

SET(PCRE_PATH "/usr")
OPTION(WITH_PCRE "use pcre(ON/OFF)" OFF)
IF(WITH_PCRE)
	FIND_PATH(PCRE_INCLUDE_DIR "pcre.h" "${PCRE_PATH}/include" "${PCRE_PATH}/local/include")
	CHECK_LIBRARY_EXISTS("pcre" "pcre_exec" "-L${PCRE_PATH}/lib" PCRE_LIB)

	IF(PCRE_INCLUDE_DIR AND PCRE_LIB)
		MESSAGE(STATUS "pcre has been successfully found")

		INCLUDE_DIRECTORIES(${PCRE_INCLUDE_DIR})
		LINK_DIRECTORIES("${PCRE_PATH}/lib")

		TARGET_LINK_LIBRARIES(dodo pcre)

		FILE(APPEND "include/libdodo/directives.runtime.h" "#define PCRE_EXT\n\n")
	ELSE(PCRE_INCLUDE_DIR AND PCRE_LIB)
		MESSAGE(FATAL_ERROR "Unable to find pcre")
	ENDIF(PCRE_INCLUDE_DIR AND PCRE_LIB)
ELSE(WITH_PCRE)
	FIND_PATH(POSIXRE_INCLUDE_DIR "regex.h")
	IF(POSIXRE_INCLUDE_DIR)
		MESSAGE(STATUS "posix regex has been successfully found")
	ELSE(POSIXRE_INCLUDE_DIR)
		MESSAGE(FATAL_ERROR "Unable to find posix regex")
	ENDIF(POSIXRE_INCLUDE_DIR)
ENDIF(WITH_PCRE)

CHECK_INCLUDE_FILES("arpa/inet.h" HAVE_ARPA_INET_H)
IF(HAVE_ARPA_INET_H)
	ADD_DEFINITIONS("-DHAVE_ARPA_INET_H")
ENDIF(HAVE_ARPA_INET_H)

CHECK_INCLUDE_FILES("fcntl.h" HAVE_FCNTL_H)
IF(HAVE_FCNTL_H)
	ADD_DEFINITIONS("-DHAVE_FCNTL_H")
ENDIF(HAVE_FCNTL_H)

CHECK_INCLUDE_FILES("netdb.h" HAVE_NETDB_H)
IF(HAVE_NETDB_H)
	ADD_DEFINITIONS("-DHAVE_NETDB_H")
ENDIF(HAVE_NETDB_H)

CHECK_INCLUDE_FILES("stdlib.h" HAVE_STDLIB_H)
IF(HAVE_STDLIB_H)
	ADD_DEFINITIONS("-DHAVE_STDLIB_H")
ENDIF(HAVE_STDLIB_H)

CHECK_INCLUDE_FILES("string.h" HAVE_STRING_H)
IF(HAVE_STRING_H)
	ADD_DEFINITIONS("-DHAVE_STRING_H")
ENDIF(HAVE_STRING_H)

CHECK_INCLUDE_FILES("unistd.h" HAVE_UNISTD_H)
IF(HAVE_UNISTD_H)
	ADD_DEFINITIONS("-DHAVE_UNISTD_H")
ENDIF(HAVE_UNISTD_H)

CHECK_INCLUDE_FILES("utime.h" HAVE_UTIME_H)
IF(HAVE_UTIME_H)
	ADD_DEFINITIONS("-DHAVE_UTIME_H")
ENDIF(HAVE_UTIME_H)

CHECK_INCLUDE_FILES("poll.h" HAVE_POLL_H)
IF(HAVE_POLL_H)
	ADD_DEFINITIONS("-DHAVE_POLL_H")
ENDIF(HAVE_POLL_H)

CHECK_INCLUDE_FILES("ctype.h" HAVE_CTYPE_H)
IF(HAVE_CTYPE_H)
	ADD_DEFINITIONS("-DHAVE_CTYPE_H")
ENDIF(HAVE_CTYPE_H)

CHECK_INCLUDE_FILES("errno.h" HAVE_ERRNO_H)
IF(HAVE_ERRNO_H)
	ADD_DEFINITIONS("-DHAVE_ERRNO_H")
ENDIF(HAVE_ERRNO_H)

CHECK_INCLUDE_FILES("grp.h" HAVE_GRP_H)
IF(HAVE_GRP_H)
	ADD_DEFINITIONS("-DHAVE_GRP_H")
ENDIF(HAVE_GRP_H)

CHECK_INCLUDE_FILES("libgen.h" HAVE_LIBGEN_H)
IF(HAVE_LIBGEN_H)
	ADD_DEFINITIONS("-DHAVE_LIBGEN_H")
ENDIF(HAVE_LIBGEN_H)

CHECK_INCLUDE_FILES("math.h" HAVE_MATH_H)
IF(HAVE_MATH_H)
	ADD_DEFINITIONS("-DHAVE_MATH_H")
ENDIF(HAVE_MATH_H)

CHECK_INCLUDE_FILES("net/if.h" HAVE_NET_IF_H)
IF(HAVE_NET_IF_H)
	ADD_DEFINITIONS("-DHAVE_NET_IF_H")
ENDIF(HAVE_NET_IF_H)

CHECK_INCLUDE_FILES("netinet/in.h" HAVE_NETINET_IN_H)
IF(HAVE_NETINET_IN_H)
	ADD_DEFINITIONS("-DHAVE_NETINET_IN_H")
ENDIF(HAVE_NETINET_IN_H)

CHECK_INCLUDE_FILES("pwd.h" HAVE_PWD_H)
IF(HAVE_PWD_H)
	ADD_DEFINITIONS("-DHAVE_PWD_H")
ENDIF(HAVE_PWD_H)

CHECK_INCLUDE_FILES("semaphore.h" HAVE_SEMAPHORE_H)
IF(HAVE_SEMAPHORE_H)
	ADD_DEFINITIONS("-DHAVE_SEMAPHORE_H")
ENDIF(HAVE_SEMAPHORE_H)

CHECK_INCLUDE_FILES("signal.h" HAVE_SIGNAL_H)
IF(HAVE_SIGNAL_H)
	ADD_DEFINITIONS("-DHAVE_SIGNAL_H")
ENDIF(HAVE_SIGNAL_H)

CHECK_INCLUDE_FILES("stdarg.h" HAVE_STDARG_H)
IF(HAVE_STDARG_H)
	ADD_DEFINITIONS("-DHAVE_STDARG_H")
ENDIF(HAVE_STDARG_H)

CHECK_INCLUDE_FILES("stdio.h" HAVE_STDIO_H)
IF(HAVE_STDIO_H)
	ADD_DEFINITIONS("-DHAVE_STDIO_H")
ENDIF(HAVE_STDIO_H)

CHECK_INCLUDE_FILES("stdlib.h" HAVE_STDLIB_H)
IF(HAVE_STDLIB_H)
	ADD_DEFINITIONS("-DHAVE_STDLIB_H")
ENDIF(HAVE_STDLIB_H)

CHECK_INCLUDE_FILES("syslog.h" HAVE_SYSLOG_H)
IF(HAVE_SYSLOG_H)
	ADD_DEFINITIONS("-DHAVE_SYSLOG_H")
ENDIF(HAVE_SYSLOG_H)

CHECK_INCLUDE_FILES("sys/ioctl.h" HAVE_SYS_IOCTL_H)
IF(HAVE_SYS_IOCTL_H)
	ADD_DEFINITIONS("-DHAVE_SYS_IOCTL_H")
ENDIF(HAVE_SYS_IOCTL_H)

CHECK_INCLUDE_FILES("symman.h" HAVE_SYMMAN_H)
IF(HAVE_SYMMAN_H)
	ADD_DEFINITIONS("-DHAVE_SYMMAN_H")
ENDIF(HAVE_SYMMAN_H)

CHECK_INCLUDE_FILES("sys/resource.h" HAVE_SYS_RESOURCE_H)
IF(HAVE_SYS_RESOURCE_H)
	ADD_DEFINITIONS("-DHAVE_SYS_RESOURCE_H")
ENDIF(HAVE_SYS_RESOURCE_H)

CHECK_INCLUDE_FILES("sys/socket.h" HAVE_SYS_SOCKET_H)
IF(HAVE_SYS_SOCKET_H)
	ADD_DEFINITIONS("-DHAVE_SYS_SOCKET_H")
ENDIF(HAVE_SYS_SOCKET_H)

CHECK_INCLUDE_FILES("sys/stat" HAVE_SYS_STAT)
IF(HAVE_SYS_STAT)
	ADD_DEFINITIONS("-DHAVE_SYS_STAT")
ENDIF(HAVE_SYS_STAT)

CHECK_INCLUDE_FILES("sys/time.h" HAVE_SYS_TIME_H)
IF(HAVE_SYS_TIME_H)
	ADD_DEFINITIONS("-DHAVE_SYS_TIME_H")
ENDIF(HAVE_SYS_TIME_H)

CHECK_INCLUDE_FILES("sys/types.h" HAVE_SYS_TYPES_H)
IF(HAVE_SYS_TYPES_H)
	ADD_DEFINITIONS("-DHAVE_SYS_TYPES_H")
ENDIF(HAVE_SYS_TYPES_H)

CHECK_INCLUDE_FILES("sys/un.h" HAVE_SYS_UN_H)
IF(HAVE_SYS_UN_H)
	ADD_DEFINITIONS("-DHAVE_SYS_UN_H")
ENDIF(HAVE_SYS_UN_H)

CHECK_INCLUDE_FILES("sys/wait" HAVE_SYS_WAIT)
IF(HAVE_SYS_WAIT)
	ADD_DEFINITIONS("-DHAVE_SYS_WAIT")
ENDIF(HAVE_SYS_WAIT)

CHECK_INCLUDE_FILES("dirent.h" HAVE_DIRENT_H)
IF(HAVE_DIRENT_H)
	ADD_DEFINITIONS("-DHAVE_DIRENT_H")
ENDIF(HAVE_DIRENT_H)

CHECK_INCLUDE_FILES("unistd.h" HAVE_UNISTD_H)
IF(HAVE_UNISTD_H)
	ADD_DEFINITIONS("-DHAVE_UNISTD_H")
ENDIF(HAVE_UNISTD_H)

CHECK_INCLUDE_FILES("utime.h" HAVE_UTIME_H)
IF(HAVE_UTIME_H)
	ADD_DEFINITIONS("-DHAVE_UTIME_H")
ENDIF(HAVE_UTIME_H)

CHECK_INCLUDE_FILES("time.h" HAVE_TIME_H)
IF(HAVE_TIME_H)
	ADD_DEFINITIONS("-DHAVE_TIME_H")
ENDIF(HAVE_TIME_H)

CHECK_INCLUDE_FILES("netdb.h" HAVE_NETDB_H)
IF(HAVE_NETDB_H)
	ADD_DEFINITIONS("-DHAVE_NETDB_H")
ENDIF(HAVE_NETDB_H)

FILE(APPEND "include/libdodo/directives.runtime.h" "#endif\n")

SET(prefix ${CMAKE_INSTALL_PREFIX})
SET(exec_prefix "${prefix}/bin")
SET(includedir "${prefix}/include")
SET(libdir "${prefix}/lib")
CONFIGURE_FILE("bin/dodo-config.in" "bin/dodo-config" @ONLY)
EXECUTE_PROCESS(COMMAND "chmod" "+x" "bin/dodo-config")

##
# install options
##

INSTALL(FILES "${PROJECT_SOURCE_DIR}/include/libdodo/*" DESTINATION include/libdodo)


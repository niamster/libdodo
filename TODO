throw baseEx(ERRMODULE_CGIPP,CGIPP_MAKEPOST,ERR_LIBDODO,CGIPP_MEMORY_OVER,CGIPP_MEMORY_OVER_STR,__LINE__,__FILE__);

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

std::string
cgicc::form_urlencode(const std::string& src)
{
  std::string result;
  std::string::const_iterator iter;
  
  for(iter = src.begin(); iter != src.end(); ++iter) {
    switch(*iter) {
    case ' ':
      result.append(1, '+');
      break;
      // alnum
    case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
    case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
    case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
    case 'V': case 'W': case 'X': case 'Y': case 'Z':
    case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g':
    case 'h': case 'i': case 'j': case 'k': case 'l': case 'm': case 'n':
    case 'o': case 'p': case 'q': case 'r': case 's': case 't': case 'u':
    case 'v': case 'w': case 'x': case 'y': case 'z':
    case '0': case '1': case '2': case '3': case '4': case '5': case '6':
    case '7': case '8': case '9':
      // mark
    case '-': case '_': case '.': case '!': case '~': case '*': case '\'': 
    case '(': case ')':
      result.append(1, *iter);
      break;
      // escape
    default:
      result.append(1, '%');
      result.append(charToHex(*iter));
      break;
    }
  }
  
  return result;
}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
std::string
cgicc::form_urldecode(const std::string& src)
{
  std::string result;
  std::string::const_iterator iter;
  char c;

  for(iter = src.begin(); iter != src.end(); ++iter) {
    switch(*iter) {
    case '+':
      result.append(1, ' ');
      break;
    case '%':
	// Don't assume well-formed input
	if(std::distance(iter, src.end()) >= 2
	   && std::isxdigit(*(iter + 1)) && std::isxdigit(*(iter + 2))) {
	    c = *++iter;
	    result.append(1, hexToChar(c, *++iter));
	}
	// Just pass the % through untouched
	else {
	    result.append(1, '%');
	}
	break;
    
    default:
      result.append(1, *iter);
      break;
    }
  }
  
  return result;
}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main()
{
	printf("Content-type: text/html\nX-Powered-By: libdodo/0.0.1\n\n");

	printf("!!%s!!",getenv("HTTP_POST_FILES")==NULL?"NULL":"SET");

	
	int i=0;
	while (environ[i])
		printf("%s<br>",environ[i++]);
	
    int cl = atoi(getenv("CONTENT_LENGTH"));
	char *post = (char *)malloc(cl);
	fread(post,cl,1,stdin);
	printf("<hr>%s",post);
	return 0;
}   
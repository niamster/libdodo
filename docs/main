Brief overview of libdodo's modules

exception::
	error handling through exception mechanism

cgi::
	HTTP server side subsystem
	serving incoming requests
	providing outgoing response

	fast::
		support for fast-cgi

io:: 
	input/output interaction subsystem
	support for: files(regular, temp, fifo), network(unix, bsd sockets, client/server interaction, tcp/udp protocols, SSL protocol, high-level HTTP(S) protocol), stdin/stdout, pipes

data::
	base::
		database interaction subsystem
		SQL-independent interface for communication with databases
		support for: MySQL, PostreSQL, SQLite

	tpl::processor
		template processor
		process template using specific syntax to produce output content
	
	xml::
		XML subsystem(parse, produce)

	json::
		json subsystem(parse, produce)

	memody::shared
			access to shared data storage

tools::
	regexp[POSIX/PCRE[compile-time]], operation system, time, string, filesystem, network, en/decoding, library manipulations, logging ...

graphics:
	image manipulation subsystem

xexec:
	system of pre/post exec operations for the libdodo modules

pc::
	parallel computation subsystem
	job execution control(processes, threads), race condition control(for processes, threads), synchronization

rpc::
	rpc client/server subsystem
	support for: cgi-server, http-client
	support for: xml-rpc, json-rpc

All libdodo methods throw exceptions on errors


cgiProcessor:

elements of syntax:

<(	open bracket
)>	close bracket

<(*	open bracket for comment
*)>	close bracket for comment

<(>	open bracket for non-parsing area
<)>	close bracket for non-parsing area

variables begins from $
examples: $var	$1var

possible 4 types of variable:
	1.string
	2.array
	3.hash
	4.array of hashes
	
you may itarate each or directly access to their members;
for example : 
			1.first symbol of string: $strVar.0
			2.second element of array: $arrVar.1
			3.first symbol of second element of array: $arrVar.1.0
			4.element named "one" of the hash: $hashVar.one
			4.element named "one" of the second element in array of hashes: $hashArrVar.1.one
	

any of (\t, \n, ", ', `) will be removed from the statement, so "$var" == '$var' == $var == '$var"

blocks:
	include:
		<(include $template)>

		<(include template.tpl)>

		includes external template file into current and processes

	
	if:
		<(if $a == $b )>
			that's OK 1
		<(fi)>

		<(if $b )>
			that's OK 2
		<(fi)>

		<(if ! $a )>
			that's OK 3
		<(else)>
			smth else ...
		<(fi)>

		`if` statement allows `==`,`!`,`!=` for strings and `<=`,`>=`,`<`,`>` for floats(converts from strings)

		`if` statement is false if statement is false(for 2 arguments) or if argument == false(string) or empty(for 1 argument)

Brief overview of libdodo's modules
libdodo consists of such modules as:

baseEx
error handling through `throw` call; it’s possible to set handler[from external module also]

cgiTools
server side `scripting`; [presents requests, headers, cookies, …]

flush
system of classes that works with input/output

flushDisk[*]
disk operations [read,write …]

flushDiskTools[*]
disk operations [read,write,file/dir operations, …]

flushSocket[Options,Exchange][*]
network operations [client/server connection and communication]

flushSocketTools[*]
network operations

flushSTD[*]
stdin/stdout operations controlled in/out put

dbBase
system SQL independent interface to communicate with database

dbSqlBase
convertions to SQL for SQLbase databases

dbMysql[*]
communication with mySQL database

dbSqlite[*]
communication with Sqlite database

regexpTools
regexp operations [match, replace]

systemTools
different system tools [system, evironment info, …]

timeTools
different time/date manipulations

xmlTools
xml parsing

tools
different functions [trim, implode/explode, …]

dodoMap
cover for std::map = not fail if request not existant value; possible ignore case in keys

xexec
pre/post exec operations in other modules(marked with [*]) in different actions

systemThreads[Shareds]
threads routine[creation, starting, shared memory syncronizations]

All libdodo methods throw exceptions on errors;
you can compile it without exceptions, in this case you may chek by return values, but sometimes it’s danger.

